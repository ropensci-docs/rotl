[{"path":"https://docs.ropensci.org/rotl/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"combining-data-from-otol-and-other-sources-","dir":"Articles","previous_headings":"","what":"Combining data from OToL and other sources.","title":"Connecting data to Open Tree trees","text":"One major goals rotl help users combine data sources phylogenetic trees Open Tree database. examples document describes ways user might connect data trees Open Tree.","code":""},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"get-open-tree-ids-to-match-your-data-","dir":"Articles","previous_headings":"","what":"Get Open Tree IDs to match your data.","title":"Connecting data to Open Tree trees","text":"Let’s say dataset row represents measurement taken one species, goal put measurements phylogenetic context. ’s small example: best estimate mutation rate set unicellular Eukaryotes along property species might explain mutation rate: want get tree species need start finding unique ID species Open Tree database. can use Taxonomic Name Resolution Service (tnrs) functions . see taxonomic contexts, can used narrow search avoid conflicts different codes, apply group species: Hmm, none groups contain species. case can search using life context function tnrs_match_names: Good, species known Open Tree. Note, though, one names synonym. Saccharomyces pombe older name now called Schizosaccharomyces pombe. name suggests, Taxonomic Name Resolution Service designed deal problems (similar ones like misspellings), always good idea check results tnrs_match_names closely ensure results expect. case good ID species can move . , let’s ensure can match original data Open Tree names IDs adding data.frame:","code":"csv_path <- system.file(\"extdata\", \"protist_mutation_rates.csv\", package = \"rotl\") mu <- read.csv(csv_path, stringsAsFactors = FALSE) mu ##                     species       mu pop.size genome.size ## 1   Tetrahymena thermophila 7.61e-12 1.12e+08    1.04e+08 ## 2    Paramecium tetraurelia 1.94e-11 1.24e+08    7.20e+07 ## 3 Chlamydomonas reinhardtii 2.08e-10 1.00e+08    1.12e+08 ## 4  Dictyostelium discoideum 2.90e-11 7.40e+06    3.40e+07 ## 5  Saccharomyces cerevisiae 3.30e-10 1.00e+08    1.25e+08 ## 6       Saccharomyces pombe 2.00e-10 1.00e+07    1.25e+08 library(rotl) tnrs_contexts() ## Possible contexts: ##    Animals  ##       Birds, Tetrapods, Mammals, Amphibians, Vertebrates  ##       Arthropods, Molluscs, Nematodes, Platyhelminthes, Annelids  ##       Cnidarians, Arachnids, Insects  ##    Fungi  ##       Basidiomycetes, Ascomycetes  ##    All life  ##    Bacteria  ##       SAR group, Archaea, Excavata, Amoebozoa, Centrohelida  ##       Haptophyta, Apusozoa, Diatoms, Ciliates, Forams  ##    Land plants  ##       Hornworts, Mosses, Liverworts, Vascular plants, Club mosses  ##       Ferns, Seed plants, Flowering plants, Monocots, Eudicots  ##       Rosids, Asterids, Asterales, Asteraceae, Aster  ##       Symphyotrichum, Campanulaceae, Lobelia taxon_search <- tnrs_match_names(names = mu$species, context_name = \"All life\") knitr::kable(taxon_search) mu$ott_name <- unique_name(taxon_search) mu$ott_id <- taxon_search$ott_id"},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"find-a-tree-with-your-taxa","dir":"Articles","previous_headings":"","what":"Find a tree with your taxa","title":"Connecting data to Open Tree trees","text":"Now let’s find tree. two possible options : can search published studies include taxa can use ‘synthetic tree’ Open Tree. can try approaches.","code":""},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"published-trees","dir":"Articles","previous_headings":"Find a tree with your taxa","what":"Published trees","title":"Connecting data to Open Tree trees","text":"can search published studies trees, check list properties can use perform searches: ottIds taxa, let’s use IDs search trees contain . Starting first species Tetrahymena thermophila can use studies_find_trees search. Well… ’s promising. can repeat process IDs see species better represented. OK, species published trees available. can help fix sort problem making sure submit published trees Open Tree.","code":"studies_properties() ## $tree_properties ##  [1] \"ot:specifiedRoot\"                 \"ot:unrootedTree\"                  ##  [3] \"ot:nodeLabelTimeUnit\"             \"xsi:type\"                         ##  [5] \"ot:MRCAName\"                      \"ot:nodeLabelDescription\"          ##  [7] \"ot:nearestTaxonMRCAOttId\"         \"ot:reasonsToExcludeFromSynthesis\" ##  [9] \"ot:curatedType\"                   \"ot:nearestTaxonMRCAName\"          ## [11] \"ot:studyId\"                       \"ot:nodeLabelMode\"                 ## [13] \"rootedge\"                         \"nodeById\"                         ## [15] \"tb:type.tree\"                     \"ot:branchLengthDescription\"       ## [17] \"ot:messages\"                      \"ot:rootNodeId\"                    ## [19] \"ot:inGroupClade\"                  \"ot:ottId\"                         ## [21] \"ot:branchLengthMode\"              \"ot:MRCAOttId\"                     ## [23] \"ot:ottTaxonName\"                  \"tb:quality.tree\"                  ## [25] \"tb:kind.tree\"                     \"ot:outGroupEdge\"                  ## [27] \"ntips\"                            \"edgeBySourceId\"                   ## [29] \"label\"                            \"meta\"                             ## [31] \"tb:ntax.tree\"                     \"ot:tag\"                           ## [33] \"ot:branchLengthTimeUnit\"          ##  ## $study_properties ##  [1] \"tb:identifier.study.tb1\"       \"id\"                            ##  [3] \"ot:taxonLinkPrefixes\"          \"ot:studyYear\"                  ##  [5] \"prism:publicationName\"         \"dc:title\"                      ##  [7] \"prism:creationDate\"            \"xmlns\"                         ##  [9] \"skos:changeNote\"               \"skos:historyNote\"              ## [11] \"ot:notIntendedForSynthesis\"    \"ot:otusElementOrder\"           ## [13] \"dc:date\"                       \"xhtml:license\"                 ## [15] \"prism:startingPage\"            \"prism:publicationDate\"         ## [17] \"ot:focalCladeOTTTaxonName\"     \"prism:section\"                 ## [19] \"prism:pageRange\"               \"ot:messages\"                   ## [21] \"ot:studyPublicationReference\"  \"ot:curatorName\"                ## [23] \"ot:dataDeposit\"                \"prism:number\"                  ## [25] \"ot:agents\"                     \"dc:publisher\"                  ## [27] \"treesById\"                     \"dcterms:bibliographicCitation\" ## [29] \"ot:treesElementOrder\"          \"prism:modificationDate\"        ## [31] \"tb:identifier.study\"           \"about\"                         ## [33] \"ntrees\"                        \"nexmljson\"                     ## [35] \"ot:comment\"                    \"dc:contributor\"                ## [37] \"dc:creator\"                    \"prism:volume\"                  ## [39] \"tb:title.study\"                \"treebaseId\"                    ## [41] \"prism:endingPage\"              \"generator\"                     ## [43] \"version\"                       \"ot:studyId\"                    ## [45] \"ot:candidateTreeForSynthesis\"  \"otusById\"                      ## [47] \"prism:doi\"                     \"dc:subject\"                    ## [49] \"ot:studyPublication\"           \"ot:focalClade\"                 ## [51] \"ot:annotationEvents\"           \"ot:tag\"                        ## [53] \"nexml2json\" studies_find_trees(property = \"ot:ottId\", value = as.character(ott_id(taxon_search)[1])) ##    study_ids n_trees                       tree_ids candidate study_year ## 1    ot_1587       1                          tree1                 2015 ## 2    ot_1589       1                          tree1                 2015 ## 3    ot_2037       4 tree10, tree11, tree12, tree13                 2018 ## 4     ot_409       2                   tree1, tree2     tree2       2015 ## 5     ot_564       1                        Tr85317   Tr85317       2015 ## 6     ot_579       1                        Tr60046                 2013 ## 7     ot_700       1                          tree1     tree1       2016 ## 8      ot_73       1                          tree1     tree1       2013 ## 9     ot_766       1                        Tr85440                 2015 ## 10    ot_767       1                          tree1     tree1       2016 ## 11     ot_87       1                        Tr64119   Tr64119       2014 ##                                                                                                                                    title ## 1  'Phylogenomic analyses reveal subclass Scuticociliatia as the sister group of subclass Hymenostomatia within class Oligohymenophorea' ## 2  'Phylogenomic analyses reveal subclass Scuticociliatia as the sister group of subclass Hymenostomatia within class Oligohymenophorea' ## 3                                                                                                                                        ## 4                                                                         Tree of life reveals clock-like speciation and diversification ## 5     'The alveolate translation initiation factor 4E family reveals a custom toolkit for translational control in core dinoflagellates' ## 6                                       'Convergent evolution of heat-inducibility during subfunctionalization of the Hsp70 gene family' ## 7                                                                                                       'A new view of the tree of life' ## 8                                           Deep relationships of Rhizaria revealed by phylogenomics: A farewell to Haeckel’s Radiolaria ## 9                                                                                 'Bacterial proteins pinpoint a single eukaryotic root' ## 10                 'Untangling the early diversification of eukaryotes: a phylogenomic study of the evolutionary origins of Centrohelida ## 11                        'Dinoflagellate phylogeny revisited: Using ribosomal proteins to resolve deep branching dinoflagellate clades' ##                                        study_doi n_matched_trees ## 1  http://dx.doi.org/10.1016/j.ympev.2015.05.007               1 ## 2  http://dx.doi.org/10.1016/j.ympev.2015.05.007               1 ## 3    http://dx.doi.org/10.1038/s41586-018-0708-8               3 ## 4        http://dx.doi.org/10.1093/molbev/msv037               1 ## 5    http://dx.doi.org/10.1186/s12862-015-0301-9               1 ## 6      http://dx.doi.org/10.1186/1471-2148-13-49               1 ## 7   http://dx.doi.org/10.1038/nmicrobiol.2016.48               1 ## 8  http://dx.doi.org/10.1016/j.ympev.2012.12.011               1 ## 9      http://dx.doi.org/10.1073/pnas.1420657112               1 ## 10      http://dx.doi.org/10.1098/rspb.2015.2802               1 ## 11 http://dx.doi.org/10.1016/j.ympev.2013.10.007               1 ##            match_tree_ids ## 1                   tree1 ## 2                   tree1 ## 3  tree10, tree13, tree11 ## 4                   tree2 ## 5                 Tr85317 ## 6                 Tr60046 ## 7                   tree1 ## 8                   tree1 ## 9                 Tr85440 ## 10                  tree1 ## 11                Tr64119 ##  [ reached 'max' / getOption(\"max.print\") -- omitted 16 rows ] hits <- lapply(mu$ott_id, studies_find_trees, property = \"ot:ottId\", detailed = FALSE) sapply(hits, function(x) sum(x[[\"n_matched_trees\"]])) ## [1]  51  51 128  71  17  88"},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"a-part-of-the-synthesis-tree","dir":"Articles","previous_headings":"Find a tree with your taxa","what":"A part of the synthesis tree","title":"Connecting data to Open Tree trees","text":"Thankfully, can still use complete Tree Life made combined results published trees taxonomies go Open Tree. function tol_induced_subtree fetch tree relating set IDs. Using default arguments can get tree object R session: plot chunk subtree","code":"ott_in_tree <- ott_id(taxon_search)[is_in_tree(ott_id(taxon_search))] tr <- tol_induced_subtree(ott_ids = ott_in_tree) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes with ## labels: mrcaott2ott276, mrcaott2ott142555, mrcaott2ott1551, mrcaott2ott7623, ## Chloroplastida ott361838, Chlorophyta ott979501, mrcaott185ott42071, ## mrcaott185ott1426, mrcaott1426ott1544, mrcaott1544ott8659, mrcaott1544ott15345, ## mrcaott1544ott9282, mrcaott9389ott818260, mrcaott9389ott23557, ## mrcaott23557ott527099, mrcaott148ott902, SAR ott5246039, Alveolata ott266751, ## Ciliophora (phylum in subkingdom SAR) ott302424, Intramacronucleata ## ott340382, mrcaott1546ott1671, Conthreep ott5248773, mrcaott1671ott16129, ## Peniculia ott1002116, Paramecium (genus in subkingdom SAR) ott568126, ## mrcaott11752ott13570, Hymenostomatia ott5257367, Tetrahymena (genus in ## subkingdom SAR) ott47284, mrcaott295406ott523463, mrcaott295406ott523462, ## Amoebozoa ott1064655, mrcaott3973ott15653, mrcaott3973ott26103, ## mrcaott26103ott273110, mrcaott26103ott229626, Dictyostelia ott835575, ## mrcaott26103ott59686, Dictyosteliales ott4008839, Dictyosteliaceae ott4008841, ## Dictyostelium ott999665, Opisthokonta ott332573, Nucletmycea ott5246132, ## Fungi ott352914, mrcaott109ott3465, mrcaott109ott67172, mrcaott109ott1423, ## mrcaott109ott69881, mrcaott109ott55157, mrcaott109ott9352, h2007-1 ott5584405, ## Dikarya ott656316, mrcaott235ott1053, Saccharomycetales ott4085960, ## Saccharomycetaceae ott989994, Saccharomyces ott908546, Schizosaccharomycetes ## ott921286, Schizosaccharomycetidae ott5670481, Schizosaccharomycetales ## ott508517, Schizosaccharomycetaceae ott990009, Schizosaccharomyces ott990008 plot(tr)"},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"connect-your-data-to-the-tips-of-your-tree","dir":"Articles","previous_headings":"Find a tree with your taxa","what":"Connect your data to the tips of your tree","title":"Connecting data to Open Tree trees","text":"Now tree species, can use tree data together? package phylobase provide object class called phylo4d, designed represent phylogeny data associated tips. order get tree data one objects make sure labels tree data match exactly. ’s quite case moment (tree labels underscores IDs appended): rotl provides convenience function strip_ott_ids deal . Ok, now tips together can make new dataset. phylo4d() functions matches tip labels row names data.frame, let’s make new dataset contains just relevant data row names match tree now can plot data tree together plot chunk unnamed-chunk-1","code":"mu$ott_name[1] ## $`Tetrahymena thermophila` ## [1] \"Tetrahymena thermophila\" tr$tip.label[4] ## [1] \"Dictyostelium_discoideum_ott160850\" tr$tip.label <- strip_ott_ids(tr$tip.label, remove_underscores = TRUE) tr$tip.label %in% mu$ott_name ## [1] TRUE TRUE TRUE TRUE TRUE TRUE library(phylobase) mu_numeric <- mu[, c(\"mu\", \"pop.size\", \"genome.size\")] rownames(mu_numeric) <- mu$ott_name tree_data <- phylo4d(tr, mu_numeric) plot(tree_data)"},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"find-external-data-associated-with-studies-trees-and-taxa-from-open-tree","dir":"Articles","previous_headings":"","what":"Find external data associated with studies, trees and taxa from Open Tree","title":"Connecting data to Open Tree trees","text":"example looked tree related species another dataset. Now go way, try find data associated Open Tree records databases.","code":""},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"get-external-data-from-a-study","dir":"Articles","previous_headings":"Find external data associated with studies, trees and taxa from Open Tree","what":"Get external data from a study","title":"Connecting data to Open Tree trees","text":"Let’s imagine interested extending reproducing results published study. study included Open Tree can find via studies_find_studies studies_find_trees retrieve published trees get_study. rotl also help find external. function study_external_IDs retrieves DOI given study, uses gather data: returned object contains external_data_url (case link study Treebase), pubmed ID paper vector IDs NCBI’s nucleotide database. packages treebase rentrez provide functions make use IDs within R. example, let’s use rentrez download first two DNA seqences print . process sequences R function read.dna ape save disk specifying file name cat.","code":"extra_data <- try(study_external_IDs(\"pg_1980\"), silent = TRUE) if (!inherits(extra_data, \"try-error\")) {   extra_data } ## External data identifiers for study  ##  $doi:  10.1016/j.ympev.2006.04.016  ##  $pubmed_id:  16762568  ##  $nucleotide_ids: vector of 58 IDs ##  $external_data_url http://purl.org/phylo/treebase/phylows/study/TB2:S1575 library(rentrez) seqs <- try(entrez_fetch(db = \"nucleotide\", id = extra_data$nucleotide_ids[1:2], rettype = \"fasta\"), silent = TRUE)  if (inherits(seqs, \"try-error\")) {   cat(\"NCBI temporarily down.\") } else {   cat(seqs) } ## >AM181011.1 Plectroninia neocaledoniense partial 28S rRNA gene, specimen voucher G316300 (Queensland Museum) ## GCTAGCAAGCGCGTCGGTGGTTCAGCCGGCTGGTCTCGTCGAGTTGTCGGTGTGCGGATCCGAACGGACC ## GCGGCCGATGGCGTCGGCGGGCAAGCTGTGGTGCACTCTGTCGGCGTGCGCGTCAGCGTCGGTTTCGGCC ## GGACGACGAGGCGCTCGGGGAAGGTAGCTGGACCGGTCTTCGGTGCAGTGTTATAGCCCTGGGCCGCTGG ## GTTCGGCGTTTGGGACCGAGGAGAGAGATGATCGCTGCAGCGCCTGTCTCCCTCTCGAGGGGGGCTAGCC ## AGCCGCTGTTTGGGTGGCGTCACTGGCGGAGGACTGCACGCAGTGCTTCGCCGGTGGTCGTGTCCAGGCG ## GGCGGTGTGGGTATAGAGGCGCTTAGGACGCTGGCGTCCAAATGGCCGTGCGCGACCCGTCTTGAAACAC ## GGACCAAGGAGTCTAGCATGTGCGCGAGTCTTAGGGTGTGGAAGCCCTCGGGCGCAATGAAAGTGAAGGG ## CCGTCGTCTCTCGGGGCTGCGGTGTGAGGTGAGAGCCGTCGCCGTCGGGTGGCGGTGCATCATCGGCCGG ## TCCATCCTGCTCTCAGGAGGATCTGCGCAAGAGCGTGTTTGCTGGGACCCGAAAGATGGTGAACTATGCC ## TGAATAGGGTGAAGCCAGAGGAAACTCTGGTGGAGGCTCGTAGCGGTTCTGACGTGCAAATCGATCGTCA ## AATTTGGGTATAGGGGCGAAAGACTAATCGAACCATCTAGTAGCTGGTTCCCTCCGAAGTTTCCCTCAGG ## ATAGCTGGAACTCGTCTTGACACAGTTTTATCAGGTAAAGCGAATGATTAGAGGTCTTGGGGGTGAAACA ## CCCTCAACCTATTCTCAAACTTTAAATAGGTAAGAAGCGCGACTTGCTCAATTGAAGTGGCGCGCAGTGA ## ATGTGAGTTCCAAGTGGGCCATTTTTGGTAAGCAGAACTGGCGATGCGGGATGAACCGAACGCTCGGTTA ## AGGTGCCCAAGTCGACGCTCATCAGACCCCAGAAAAGGTGTTGGTCGATATAGACAGCAGGACGGTGGCC ## ATGGAAGTCGGAATCCGCTAAGGAGTGTGTAACAACTCACCTGCCGAATCAACTAGCCCTGAAAATGGAT ## GGCGCTCAAGCGTCGCACCTATACCGAGCCGTCGTGGTAAATGCCAGGCCACGACGAGTAGGAGGGCGCG ## GTGGTCGTGACGCAGCCCTTGGCGCGAGCCTGGGCGAAACGGCCTCCGGTGCAGATCTTGGTGGTAGTAG ## CAAATATTCAAATGAGAGCTTTGAAGACCGAAGTGGAGAAAGGTTCCATGTGAACAGCAGTTGGACATGG ## GTTAGTCGATCCTAAGAGATAGGGAAGTTCCGTGTGAAAGTGCGCAATGCGCTTCTGTGCTGCGCGCCTC ## CTATCGAAAGGGAATCGGGTTAATATTCCCGAACCGGAAGGCGGATATCTCTGGCTCTCGGGTCAGGAGC ## GGCAACGCAAGCGTACTGCGAGACGTCGGCGGGGGCTCCGGGAAGAGTTGTCTTTTCTTTTTAACGCAGT ## CGCCATCCCTGGAATCGGTTTGCCCGGAGATAGGGTTGGCTGGCTCGGTAAAGCAGCACACTTCATGTGC ## TGTCCGGTGCGCTCTCGACGGCCCTTGAAAATCGCAGGTGTGCATCGATTCTCGCATCCGGTCGTACTCA ## TAACCGCATCAGGTCTCCAAGGT ##  ## >AM181010.1 Eilhardia schulzei partial 28S rRNA gene, specimen voucher G316071 (Queensland Museum) ## GCTAGTAATGTACGTTGGTGGTTCAGCCGGCTAGTCTTGTCGAGTCGTCGTGTGGTGGATCCGACTGGAC ## CGTCCGCGGTGGTGTCGGCGGGCGAGCTGTGGTGCACTCTACGGACGTGCGCGTCAGCGTCGGTTCTCGA ## TGGGCGATAAGGTGCGTGGGGGAAGGTGGCTCGGTCCTTGGGAACTGAGTGTTACAGACCCTGGTGCTGG ## GCTCGTCGTGGGACCGAGGAGAGAGAGAGATGATCGCTGCGGCACCTGCCCCGTTGTCATTTTTCGGGGC ## TAGCCAGCCGTTTGTCAGGTGTGCGTCGGACGTTGAGGACTGCACGCAGTGCTGGACGTGGAGGCGTGAT ## CTGATGGCGGTGTGGGCATTAGAGGTGCCTAGGACGCTGGCGTCCAAATGGCCGTGCGCGACCCGTCTTG ## AAACACGGACCAAGGAGTCTAACATGTGCGCGAGTCTTAGGGTGTGCAAGCCCTCGGGCGCAATGAAAGT ## GAAGGCTCGGCGGCGCTAGTCGAGCTGAGGTGAGAGCCGTGGCCGTTGCATGTGGCGGCGGCGGCGCATC ## ATCGGCCGGTCCATCCTGCTCTCAGGGGGATCCGAGCAAGAGCGTATTTGTTGGGACCCGAAAGATGGTG ## AACTATGCCTGAATAGGGTGAAGCCAGAGGAAACTCTGGTGGAGGCTCGTAGCGATTCTGACGTGCAAAT ## CGATCGTCAAATTTGGGTATAGGGGCGAAAGACTAATCGAACCATCTAGTAGCTGGTTCCCTCCGAAGTT ## TCCCTCAGGATAGCTGGAGCTCTTGGACACAGTTTTATCAGGTAAAGCGAATGATCAGAGGTCTTGGGGG ## TGAAACACCCTCAACCTATTCTCAAACTTTAAATCGGTAAGAAGCGCGACTTGCTGAATTGAAGCCGCGC ## GCAAGCAATGTGAGTTCCAAGTGGGCCATTTTTGGTAAGCAGAACTGGCGATGCGGGATGAACCGAACGC ## TGGGTTAAGGTGCCAAAGTCGACGCTCATCAGACCCCAGAAAAGGTGTTGGTTGATATAGACAGCAGGAC ## GATGGCCATGGAAGTCGGAATCCGCTAAGGAGTGTGTAACAACTCACCTGCCGAATCAACTAGCCCTGAA ## AATGGATGGCGCTCAAGCGTCGCACCTATACCGGGCCGTCGTCGCAAATGCCAGGCGACGACGAGTAGGA ## GGGCGCAGTGGTCGTCATGCAGCCCTTGGCGTGAGCCTGGGTCAAACGGCCTCTGGTGCAGATCTTGGTG ## GTAGTAGCAAATATTCAAATGAGAGCTTTGAAGACCGAAGTGGAGAAAGGTTCCATGTGAACAGCAGTTG ## GACATGGGTTAGTCGATCCTAAGTGATAGGGGAGCTCCGTATGAAAGTGCGCAATCGGCCCTGCTTGTGT ## CGCCTTGCGCCACCTATCGAAAGGGAATCGGGTTAATATTCCCGAACCGGAAGGCGGATTTTCTCTGGCT ## CTCGGGTCAGGAGCGGCAACGCTAGCGAACCGCGAGACGTCGGCGGGGGCTCCGGGAAGAGTTGTCTTTT ## CTTTTTAACGCAGTCGCCATCCCTGGAATCGGTTTGCCCGGAGATAGGGTTGGCTGGCTCGGTAAAGCAG ## CACACTTCATGTGCTGTCCGGTGCGCTCTCGACGGCCCTTGAAAATCGCGGCGAGTGTAGTCTGATTTTC ## GCATCCGTTCGTACTCATAACCGCATCAGGTCTCCAAGGT"},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"find-a-ott-taxon-in-another-taxonomic-database","dir":"Articles","previous_headings":"Find external data associated with studies, trees and taxa from Open Tree","what":"Find a OTT taxon in another taxonomic database","title":"Connecting data to Open Tree trees","text":"also possible map Open Tree taxon record another taxonomic database. instance, wanted search data one tips sub-tree fetched example using taxon_external_IDs: user use rgbif find locality records using gbif ID rentrez get genetic bibliometric data NCBI’s databases.","code":"Tt_ids <- taxon_external_IDs(mu$ott_id[2]) Tt_ids ##   source       id ## 1  silva AY102613 ## 2   ncbi     5888 ## 3   gbif  7415807"},{"path":"https://docs.ropensci.org/rotl/articles/data_mashups.html","id":"what-next","dir":"Articles","previous_headings":"","what":"What next","title":"Connecting data to Open Tree trees","text":"demonstration gets point visualizing data phylogenetic context. ’s lot sort data R. instance, use packages like ape, caper, phytools mcmcGLMM perform phylogenetic comparative analyses data. gather data species using packages connect trait databases like rfishbase, AntWeb rnpn provides data US National Phenology Network. also use rentrez find genetic data species, use data generate branch lengths phylogeny.","code":""},{"path":"https://docs.ropensci.org/rotl/articles/meta-analysis.html","id":"phylogenetic-comparative-methods","dir":"Articles","previous_headings":"","what":"Phylogenetic Comparative Methods","title":"Using the Open Tree synthesis in a comparative analysis","text":"development phylogenetic comparative methods made phylogenies important source data fields diverse ecology, genomic medicine. Comparative methods can used investigate patterns evolution traits diversification lineages. cases phylogeny treated “nuisance parameter”, allowing autocorrelation created shared evolutionary history different species included controlled . many cases finding tree relates species trait data available rate-limiting step comparative analyses. show synthetic tree provided Open Tree Life (made available R via rotl) can help fill gap.","code":""},{"path":"https://docs.ropensci.org/rotl/articles/meta-analysis.html","id":"a-phylogenetic-meta-analysis","dir":"Articles","previous_headings":"","what":"A phylogenetic meta-analysis","title":"Using the Open Tree synthesis in a comparative analysis","text":"demonstrate use rotl comparative analysis, partially reproduce results Rutkowska et al 2014. briefly, study meta-analysis summarising results multiple studies testing systematic differences size eggs contain male female offspring. difference might mean birds invest heavily one sex . study involves data 51 different species, Rutkowska et al used phylogenetic comparative approach account shared evolutionary history among studied-species.","code":""},{"path":"https://docs.ropensci.org/rotl/articles/meta-analysis.html","id":"gather-the-data","dir":"Articles","previous_headings":"A phylogenetic meta-analysis","what":"Gather the data","title":"Using the Open Tree synthesis in a comparative analysis","text":"going reproduce analysis, first need gather data. Thankfully, data available supplementary material publisher’s website. provide copy data package: important variable dataset Zr, normalized effect size difference ,size eggs contain males females. Values close zero come studies found sex egg’s inhabitant little effect size, large positive negative values correspond studies substantial sex biases (towards males females respectively). Since meta-analysis produce classic funnel plot effects-size y-axis precision (inverse sample standard error) x-axis. calculate precision sample variance (Vzr): plot chunk eggs_in_a_funnel order use data later need first convert standard data.frame. can also convert animal column (species names) lower case, remove underscores names, make easier match names later :","code":"library(rotl) ## This dataset is available from the publisher's study website: egg_data <- read.csv(system.file(\"extdata\", \"egg.csv\", package = \"rotl\"),   stringsAsFactors = FALSE ) ## } head(egg_data) ##                   animal                   Spp       Lndim Measure Neggs ## 1 Zonotrichia_leucophrys White-crowned sparrow 0.000000000  volume   294 ## 2      Passer_domesticus         House sparrow 0.009407469  volume   149 ## 3        Serinus_canaria                Canary 0.000000000  volume    52 ## 4          Turdus_merula    European blackbird 0.021189299  volume    82 ## 5    Agelaius_phoeniceus  Red-winged blackbird 0.218316086  volume   394 ## 6    Quiscalus_mexicanus  Great-tailed grackle 0.281894985    mass   822 ##   Nclutches        ESr Type         StudyID Year        D        EN         Zr ## 1        73 0.14004594 stat        Mead1987 1987 3.421918  85.91673 0.14097244 ## 2        31 0.11175203 stat     Cordero2000 2000 4.045161  36.83413 0.11222075 ## 3        21 0.49679140 stat     Leitner2006 2006 2.180952  23.84279 0.54503712 ## 4        54 0.38598540 stat     Martyka2010 2010 1.414815  57.95812 0.40707397 ## 5       106 0.07410136  raw Weatherhead1985 1985 3.173585 124.14982 0.07423744 ## 6       205 0.05178834  raw     Teather1989 1989 3.407805 241.21099 0.05183471 ##           VZr ## 1 0.012060292 ## 2 0.029555954 ## 3 0.047978211 ## 4 0.018195675 ## 5 0.008254242 ## 6 0.004197959 plot(1 / sqrt(egg_data$VZr), egg_data$Zr,   pch = 16,   ylab = \"Effect size (Zr)\",   xlab = \"Precision (1/SE)\",   main = \"Effect sizes for sex bias in egg size among 51 brid species\" ) egg_data <- as.data.frame(egg_data) ## Convert taxon names to lower case egg_data$animal <- tolower(egg_data$animal) ## Let's remove the underscores (_) from the taxon names egg_data$animal <- gsub(\"_\", \" \", egg_data$animal)"},{"path":"https://docs.ropensci.org/rotl/articles/meta-analysis.html","id":"find-the-species-in-ott","dir":"Articles","previous_headings":"A phylogenetic meta-analysis","what":"Find the species in OTT","title":"Using the Open Tree synthesis in a comparative analysis","text":"can use OTL synthesis tree relate species. first need find Open Tree Taxonomy (OTT) IDs species. can Taxonomic Name Resolution Service function tnrs_match_names: species OTT, go different names Open Tree data set. tree rotl fetches Open Tree names, need create named vector maps names species names Open Tree uses : Now can use map retrieve “data set names” “OTT names”:","code":"taxa <- tnrs_match_names(unique(egg_data$animal), context = \"Animals\") ## Warning in tnrs_match_names(unique(egg_data$animal), context = \"Animals\"): ## partial argument match of 'context' to 'context_name' head(taxa) ##            search_string            unique_name approximate_match ott_id ## 1 zonotrichia leucophrys Zonotrichia leucophrys             FALSE 265553 ## 2      passer domesticus      Passer domesticus             FALSE 745175 ## 3        serinus canaria        Serinus canaria             FALSE 464865 ## 4          turdus merula          Turdus merula             FALSE 568572 ## 5    agelaius phoeniceus    Agelaius phoeniceus             FALSE 226605 ## 6    quiscalus mexicanus    Quiscalus mexicanus             FALSE 743411 ##   is_synonym          flags number_matches ## 1      FALSE                             1 ## 2      FALSE                             1 ## 3      FALSE sibling_higher              1 ## 4      FALSE                             1 ## 5      FALSE                             1 ## 6      FALSE                             1 taxon_map <- structure(taxa$search_string, names = taxa$unique_name) taxon_map[\"Anser caerulescens\"] ##  Anser caerulescens  ## \"chen caerulescens\""},{"path":"https://docs.ropensci.org/rotl/articles/meta-analysis.html","id":"get-a-tree","dir":"Articles","previous_headings":"A phylogenetic meta-analysis","what":"Get a tree","title":"Using the Open Tree synthesis in a comparative analysis","text":"Now can get tree. really many tips show nicely, leave plot  things note . First, tree branch lengths. present true whole Open Tree synthetic tree. comparative methods require either branch lengths ultrametric tree. can use one methods need get tree branch lengths. try looking published trees made available Open Tree studies_find_trees. Alternatively, estimate branch lengths toplogy phylogeny returned tol_induced_subtree, perhaps downloading DNA sequences NCBI rentrez “hanging” tree nodes known-age using penalized likelihood method ape::chronos. case, use topology tree input comparative analysis, can skip steps. Second, tip labels contain OTT IDs, means perfectly match species names dataset taxon map created earlier: Finally, tree contains node labels nodes match higher taxonomic group, empty character vectors (\"\") nodes. comparative methods either expect node labels , require labeled nodes unique name (meaning multiple “empty” labels cause error). can deal details easily. rotl provides convenience function strip_ott_ids remove extra information tip labels. IDs removed, can use taxon map replace tip labels tree species names dataset. Finally, can remove node labels setting node.label attribute tree NULL.","code":"tr <- tol_induced_subtree(ott_id(taxa)[is_in_tree(ott_id(taxa))]) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes ## with labels: mrcaott246ott5481, mrcaott246ott7145, mrcaott246ott928360, ## mrcaott246ott1858, mrcaott246ott2907, mrcaott246ott3600042, mrcaott246ott7113, ## Passeriformes ott1041547, mrcaott246ott3212, mrcaott246ott428578, ## mrcaott246ott44866, mrcaott246ott5929, mrcaott246ott32658, ## mrcaott246ott310390, mrcaott246ott176461, mrcaott246ott22325, ## mrcaott246ott10351, mrcaott246ott193904, mrcaott246ott5934, mrcaott246ott1566, ## mrcaott1566ott3598440, mrcaott1566ott496009, mrcaott1566ott59716, ## mrcaott1566ott32651, mrcaott1566ott24297, mrcaott1566ott45312, ## mrcaott1566ott22300, mrcaott22300ott35350, mrcaott22300ott547548, ## mrcaott22300ott909199, mrcaott22300ott67150, mrcaott22300ott130294, ## mrcaott22300ott3598245, mrcaott22300ott416087, mrcaott22300ott629342, ## mrcaott22300ott416089, mrcaott22300ott107840, mrcaott364210ott451069, ## mrcaott364210ott3598839, mrcaott3598839ott5341363, mrcaott19467ott431648, ## mrcaott19467ott252687, mrcaott19467ott401023, mrcaott19467ott233446, ## mrcaott19467ott168078, mrcaott19467ott1046624, mrcaott19467ott161293, ## mrcaott19467ott46396, mrcaott46396ott46398, mrcaott46398ott168083, ## mrcaott168083ott431676, mrcaott2175ott35326, mrcaott2175ott968664, ## mrcaott2175ott259082, mrcaott2175ott59905, mrcaott2175ott2224, ## mrcaott2224ott366470, mrcaott3364ott310375, mrcaott3364ott3370, ## mrcaott4083ott35042, mrcaott4083ott370807, mrcaott4083ott469177, ## mrcaott4083ott18592, mrcaott4083ott139823, mrcaott4083ott11712, ## mrcaott4083ott95949, Erythrura ott465905, mrcaott24017ott389884, ## mrcaott24017ott24025, mrcaott24025ott596763, mrcaott24025ott453058, ## mrcaott24025ott141501, mrcaott141501ott966119, mrcaott141501ott865472, ## mrcaott141501ott389883, mrcaott105913ott311555, mrcaott311555ott1082386, ## mrcaott311555ott708327, mrcaott708327ott966122, mrcaott4088ott8371, ## mrcaott4088ott5616, mrcaott5616ott28339, mrcaott5616ott6023, ## mrcaott6023ott243614, mrcaott6023ott101225, mrcaott6023ott125079, ## mrcaott125079ott463026, mrcaott125079ott765405, Zonotrichia (genus in ## domain Eukaryota) ott789032, mrcaott125079ott265547, mrcaott125079ott265554, ## mrcaott5620ott254662, mrcaott5620ott29804, mrcaott29804ott449580, ## mrcaott29804ott449562, mrcaott29804ott86894, mrcaott29804ott93045, ## mrcaott93045ott264496, mrcaott264496ott264500, mrcaott264500ott3597163, ## mrcaott264500ott283668, Quiscalus ott743410, mrcaott283673ott673386, ## mrcaott283673ott741944, mrcaott283673ott735243, mrcaott213448ott213452, ## mrcaott213448ott1009279, mrcaott213448ott213451, mrcaott213454ott430627, ## mrcaott430627ott498751, mrcaott430627ott617797, mrcaott430627ott3597159, ## mrcaott99175ott364331, Xanthocephalus ott364336, mrcaott6366ott28332, ## mrcaott6366ott88283, mrcaott6366ott341465, mrcaott6366ott157599, ## mrcaott6366ott178457, mrcaott6366ott405215, mrcaott6366ott238142, ## mrcaott6366ott6375, mrcaott6375ott119724, mrcaott6375ott238137, ## mrcaott238137ott328909, mrcaott238137ott464865, Haemorhous ott3601758, ## mrcaott9416ott840030, mrcaott9416ott96148, mrcaott9416ott7068473, Passer ## ott515158, mrcaott9416ott407769, mrcaott9416ott25628, mrcaott9416ott407764, ## mrcaott9416ott68955, mrcaott9416ott73636, mrcaott1488ott72472, ## mrcaott1488ott63797, mrcaott1488ott284404, mrcaott1488ott107463, ## mrcaott1488ott17016, mrcaott1488ott44217, mrcaott1488ott16185, ## mrcaott16185ott274931, Hirundinidae ott897681, mrcaott16185ott67916, ## mrcaott67916ott67921, mrcaott67916ott368059, mrcaott67916ott67920, ## Delichon ott922719, mrcaott107476ott177058, mrcaott107476ott271376, ## mrcaott107476ott337752, mrcaott337752ott7661935, mrcaott337752ott337762, ## mrcaott337752ott7068616, mrcaott2375ott73144, mrcaott2375ott124085, ## mrcaott2375ott71358, mrcaott2375ott814750, mrcaott2375ott61147, ## mrcaott84656ott123763, mrcaott123763ott728471, mrcaott123763ott258794, ## mrcaott4820ott409116, mrcaott4820ott17162, mrcaott4820ott20998, ## mrcaott4820ott20989, mrcaott4820ott58860, mrcaott4820ott23690, ## mrcaott4820ott20996, mrcaott4820ott11462, mrcaott4820ott140440, ## mrcaott4820ott197505, mrcaott4820ott75978, mrcaott4820ott11315, ## mrcaott4820ott5933, mrcaott5933ott60465, mrcaott5933ott25637, ## mrcaott25637ott199843, mrcaott25637ott473431, mrcaott25637ott686166, ## mrcaott25637ott111993, mrcaott25637ott183621, mrcaott183621ott501241, ## mrcaott501241ott3598010, mrcaott501241ott597018, mrcaott686165ott686168, ## mrcaott60456ott662804, mrcaott60456ott75990, Pica ott776480, Falconiformes ## ott212187, Falconidae ott212186, mrcaott47588ott225286, mrcaott47588ott748842, ## mrcaott47588ott201377, mrcaott201377ott773020, Cerchneis ott3596159, ## mrcaott179290ott352521, mrcaott179290ott624976, mrcaott179290ott624973, ## mrcaott179290ott624974, mrcaott179290ott432111, mrcaott5272ott92263, ## mrcaott5272ott24121, Scolopacidae ott887699, mrcaott24121ott217797, ## mrcaott24121ott45306, mrcaott24121ott654830, mrcaott24121ott214779, ## mrcaott24121ott651066, mrcaott651066ott1090732, mrcaott7639ott306220, ## mrcaott7639ott57833, mrcaott7639ott383929, mrcaott7639ott279504, ## mrcaott7639ott47401, mrcaott7639ott341047, mrcaott7639ott234666, ## mrcaott7639ott341034, mrcaott7639ott285543, Sterna ott16767, ## mrcaott285543ott341030, mrcaott285543ott738509, mrcaott285543ott966606, ## mrcaott285543ott966604, mrcaott22965ott738512, mrcaott22965ott80679, ## mrcaott22965ott558955, mrcaott22965ott154126, mrcaott22965ott241571, ## mrcaott22965ott282132, mrcaott22965ott414141, mrcaott22965ott704174, ## mrcaott22965ott704175, mrcaott22965ott324050, mrcaott22965ott353849, ## mrcaott22965ott75913, mrcaott75913ott335736, mrcaott306645ott450107, ## mrcaott425206ott887691, mrcaott425206ott515355, mrcaott119599ott993041, ## mrcaott119599ott509055, mrcaott698969ott4947414, mrcaott147723ott219032, ## Stercorariidae ott168297, Stercorarius ott742632, mrcaott742640ott742641, ## mrcaott57823ott57827, mrcaott57823ott242771, mrcaott57823ott112937, ## mrcaott112937ott129402, mrcaott112937ott454019, mrcaott112937ott242776, ## mrcaott242776ott313115, mrcaott242776ott704464, mrcaott242776ott331994, ## mrcaott331994ott413796, mrcaott9830ott86672, mrcaott9830ott90560, ## mrcaott9830ott324158, mrcaott9830ott55044, mrcaott9830ott285638, ## mrcaott9830ott117726, Sulidae ott452462, mrcaott170197ott403772, Sula ott160486, ## mrcaott170197ott5859716, mrcaott170197ott429615, mrcaott429615ott1030312, ## Procellariiformes ott452461, mrcaott18206ott31011, mrcaott31011ott71459, ## Diomedeidae ott85277, mrcaott71459ott320282, Phoebastria ott941509, ## mrcaott320282ott320284, Sphenisciformes ott494366, Spheniscidae ott494367, ## mrcaott60413ott3600120, mrcaott60413ott4130813, mrcaott60413ott4130835, ## mrcaott60413ott4130830, mrcaott60413ott3600127, mrcaott60413ott4130831, ## mrcaott60413ott3600124, mrcaott60413ott3600128, mrcaott60413ott3600129, ## mrcaott60413ott4130819, mrcaott60413ott4130817, mrcaott60413ott60417, ## mrcaott60413ott3600131, mrcaott60413ott917663, Eudyptes ott494364, ## mrcaott82219ott116946, mrcaott116946ott219197, mrcaott134466ott494361, ## Pygoscelis ott494365, mrcaott134466ott783352, mrcaott5021ott198671, ## mrcaott5021ott75792, Cuculiformes ott212171, mrcaott75792ott212172, ## mrcaott75792ott3601282, mrcaott75792ott119216, mrcaott119216ott212175, ## mrcaott119216ott169265, mrcaott169265ott550039, mrcaott169265ott462546, ## mrcaott462546ott3596355, mrcaott462546ott1050027, Cuculus ott1041429, ## mrcaott549514ott7068132, mrcaott549514ott3596308, mrcaott549514ott3596307, ## mrcaott549514ott3596306, mrcaott549514ott792626, mrcaott17146ott57819, ## Columbiformes ott363030, mrcaott17146ott45505, mrcaott45505ott50388, ## mrcaott45505ott506098, mrcaott45505ott51607, mrcaott51607ott277822, ## mrcaott51607ott67614, mrcaott51607ott244134, Columba ott938415, ## mrcaott51607ott277817, mrcaott277817ott320359, mrcaott320359ott493986, ## mrcaott320359ott767317, mrcaott320359ott921832, mrcaott320359ott938416, ## Galliformes ott837585, mrcaott4765ott6520194, mrcaott4765ott109888, ## mrcaott4765ott75785, mrcaott4765ott104461, mrcaott4765ott151684, ## mrcaott4765ott54193, mrcaott4765ott49319, mrcaott4765ott3596087, ## mrcaott4765ott415487, mrcaott4765ott51354, mrcaott4765ott446490, Tetraoninae ## ott999677, mrcaott4765ott55929, mrcaott4765ott539045, mrcaott4765ott234824, ## Centrocercus ott728081, mrcaott53700ott572162, mrcaott53700ott466627, ## mrcaott53700ott309383, mrcaott53700ott102722, mrcaott102722ott137547, Phasianus ## ott102718, mrcaott49310ott102705, mrcaott49310ott153554, mrcaott153554o plot(tr, show.tip.label = FALSE) tr$tip.label[1:4] ## [1] \"Ficedula_albicollis_ott107840\" \"Luscinia_svecica_ott274225\"    ## [3] \"Turdus_merula_ott568572\"       \"Sturnus_unicolor_ott366470\" otl_tips <- strip_ott_ids(tr$tip.label, remove_underscores = TRUE) tr$tip.label <- taxon_map[ otl_tips ] tr$node.label <- NULL egg_data <- egg_data[egg_data$animal %in% tr$tip.label, ]"},{"path":"https://docs.ropensci.org/rotl/articles/meta-analysis.html","id":"perform-the-meta-analysis","dir":"Articles","previous_headings":"A phylogenetic meta-analysis","what":"Perform the meta-analysis","title":"Using the Open Tree synthesis in a comparative analysis","text":"Now data tree, know names tree match ones data. ’s time comparative analysis. Rutkowska et al. used MCMCglmm, Bayesian MCMC approach fitting multi-level models,perform meta-analysis, . course, properly analyse data take care deciding appropriate priors use inspect results carefully. case, really interested using demonstration, just run simple model. Specifically sill fit model variable might explain values Zr random factor animal, corresponds phylogenetic relationships among species. also provide Zvr measurement error variance, effectively adding extra weight results powerful studies. ’s specify fit model MCMCglmm: Now result can find much phylogenetic signal exists sex-biased differences egg-size. multi-level model can use variance components look , specifically proportion total variance can explained phylogeny called phylogenetic reliability, H. Let’s calculate H model: appears almost phylogenetic signal data. relationships among species explain much less one percent total variance data. wondering, Rutkowska et al. report similar result, even adding predictors model variance Zr left unexplained.","code":"set.seed(123) if (require(MCMCglmm, quietly = TRUE)) {   pr <- list(     R = list(V = 1, nu = 0.002),     G = list(G1 = list(V = 1, nu = 0.002))   )    model <- MCMCglmm(Zr ~ 1,     random = ~animal,     pedigree = tr,     mev = egg_data$VZr,     prior = pr,     data = egg_data,     verbose = FALSE   ) } else {   model <- readRDS(file = system.file(\"extdata\", \"mcmcglmm_model.rds\", package = \"rotl\")) } ## Warning in inverseA(pedigree = pedigree, scale = scale, nodes = nodes): no ## branch lengths: compute.brlen from ape has been used ## Warning in sing.rm$coef: partial match of 'coef' to 'coefficients' ## Warning in x$n: partial match of 'n' to 'nu'  ## Warning in x$n: partial match of 'n' to 'nu'  ## Warning in x$n: partial match of 'n' to 'nu'  ## Warning in x$n: partial match of 'n' to 'nu'  ## Warning in x$n: partial match of 'n' to 'nu'  ## Warning in x$n: partial match of 'n' to 'nu' var_comps <- colMeans(model$VCV) var_comps[\"animal\"] / sum(var_comps) ##     animal  ## 0.00283581"},{"path":"https://docs.ropensci.org/rotl/articles/meta-analysis.html","id":"what-other-comparative-methods-can-i-use-in-r","dir":"Articles","previous_headings":"","what":"What other comparative methods can I use in R?","title":"Using the Open Tree synthesis in a comparative analysis","text":"demonstrated just one comparative analysis might R. ever-growing number packages allow ever-growing number analysis performed R. “classics” like ancestral state reconstruction, phylogenetic independent contrasts lineage time plots implemented ape. Packages like phytools, caper diversitree provide extensions methods. CRAN Phylogenetics Taskview gives good idea diversity packages analyses can completed R (note links draft next version Taskview currently unavailable CRAN).","code":""},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"demonstration-of-a-basic-workflow","dir":"Articles","previous_headings":"","what":"Demonstration of a basic workflow","title":"How to use rotl?","text":"common use rotl probably start list species get relevant parts tree species. two step process: species names need matched ott_id (Open Tree Taxonomy identifiers) using Taxonomic name resolution services (TNRS) ott_id used retrieve relevant parts Tree Life.","code":""},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"step-1-matching-taxonomy-to-the-ott_id","dir":"Articles","previous_headings":"Demonstration of a basic workflow","what":"Step 1: Matching taxonomy to the ott_id","title":"How to use rotl?","text":"Let’s start search diverse group taxa: tree frog (genus Hyla), fish (genus Salmo), sea urchin (genus Diadema), nautilus (genus Nautilus). ’s always good idea check resolved names match intended: column unique_name sometimes indicates higher taxonomic level associated name. column number_matches indicates number ott_id corresponds given name. example, search Diadema returns 2 matches, one returned default indeed sea urchin want query. argument context_name allows limit taxonomic scope search. Diadema also genus name fungus. ensure search limited animal names, : trying build tree deeply divergent taxa argument context_name fix, see “change ott ids assigned taxa?” FAQ .","code":"library(rotl) taxa <- c(\"Hyla\", \"Salmo\", \"Diadema\", \"Nautilus\") resolved_names <- tnrs_match_names(taxa) resolved_names <- tnrs_match_names(taxa, context_name = \"Animals\")"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"step-2-getting-the-tree-corresponding-to-our-taxa","dir":"Articles","previous_headings":"Demonstration of a basic workflow","what":"Step 2: Getting the tree corresponding to our taxa","title":"How to use rotl?","text":"Now correct ott_id taxa, can ask tree using tol_induced_subtree() function. default, object returned tol_induced_subtree phylo object (ape package), can plot directly. plot chunk unnamed-chunk-3","code":"my_tree <- tol_induced_subtree(ott_ids = resolved_names$ott_id) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes ## with labels: Chordata ott125642, mrcaott42ott658, Craniata (subphylum in ## Deuterostomia) ott947318, Vertebrata (subphylum in Deuterostomia) ott801601, ## Gnathostomata (superclass in phylum Chordata) ott278114, Teleostomi ## ott114656, Sarcopterygii ott458402, Dipnotetrapodomorpha ott4940726, ## Tetrapoda ott229562, Amphibia ott544595, Batrachia ott471197, Anura ott991547, ## mrcaott114ott3129, mrcaott114ott37876, mrcaott114ott18818, Neobatrachia ## ott535804, mrcaott114ott309463, mrcaott114ott177, mrcaott177ott7464, ## mrcaott177ott2199, mrcaott177ott29310, mrcaott177ott1321, Hylidae ott535782, ## mrcaott177ott17126, mrcaott177ott43017, mrcaott177ott2732, mrcaott2732ott3289, ## mrcaott3289ott40328, mrcaott3289ott173489, mrcaott3289ott110534, ## mrcaott3289ott489758, mrcaott3289ott59160, Actinopterygii ott773483, ## Actinopteri ott285821, Neopterygii ott471203, Teleostei ott212201, ## Osteoglossocephalai ott5506109, Clupeocephala ott285819, Euteleosteomorpha ## ott5517919, mrcaott274ott392, mrcaott274ott595, Protacanthopterygii ott1024043, ## mrcaott274ott3887, mrcaott3887ott9371, Salmoniformes ott216171, Salmonidae ## ott739933, mrcaott3887ott28511, Salmoninae ott936925, mrcaott31485ott79094, ## mrcaott360ott10516, Echinodermata ott451020, Eleutherozoa ott317277, Echinozoa ## ott669475, Echinoidea ott669472, mrcaott360ott26831, mrcaott360ott3985, ## mrcaott360ott367, mrcaott360ott362, Acroechinoidea ott5677511, Diadematoida ## ott631174, Diadematidae ott631173, Protostomia ott189832, mrcaott49ott6612, ## Lophotrochozoa ott155737, mrcaott56ott519, mrcaott56ott5497, Mollusca ott802117, ## mrcaott56ott1881, mrcaott1881ott102410, Cephalopoda ott7368, Nautiloidea ## ott854446, Nautilida ott854452, Nautilidae ott616361 plot(my_tree, no.margin = TRUE)"},{"path":[]},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"how-to-change-the-ott-ids-assigned-to-my-taxa","dir":"Articles","previous_headings":"FAQ","what":"How to change the ott ids assigned to my taxa?","title":"How to use rotl?","text":"realize tnrs_match_names assigns incorrect taxonomic group name (e.g., synonymy) changing context_name help, can use function inspect. function takes object resulting tnrs_match_names(), either row number, taxon name (used search lowercase), ott_id returned initial query. illustrate , let’s re-use previous query time pretending interested fungus Diadema sea urchin: case, want second row data frame replace information initially matched Diadema. can now use update() function, change correct taxa (fungus sea urchin): now resolved_names data frame includes taxon want:","code":"taxa <- c(\"Hyla\", \"Salmo\", \"Diadema\", \"Nautilus\") resolved_names <- tnrs_match_names(taxa) resolved_names ##   search_string unique_name approximate_match  ott_id is_synonym flags ## 1          hyla        Hyla             FALSE 1062216      FALSE       ## 2         salmo       Salmo             FALSE  982359      FALSE       ## 3       diadema     Diadema             FALSE 4930522      FALSE       ## 4      nautilus    Nautilus             FALSE  616358      FALSE       ##   number_matches ## 1              1 ## 2              1 ## 3              4 ## 4              1 inspect(resolved_names, taxon_name = \"diadema\") ##   search_string                       unique_name approximate_match  ott_id ## 1       diadema                           Diadema             FALSE 4930522 ## 2       diadema                       Diademoides             FALSE 4024672 ## 3       diadema Garrettia (genus in Opisthokonta)             FALSE  631176 ## 4       diadema                        Hypolimnas             FALSE  643831 ##   is_synonym          flags number_matches ## 1      FALSE                             4 ## 2       TRUE sibling_higher              4 ## 3       TRUE                             4 ## 4       TRUE                             4 resolved_names <- update(resolved_names,   taxon_name = \"diadema\",   new_row_number = 2 )  ## we could also have used the ott_id to replace this taxon: ## resolved_names <- update(resolved_names, taxon_name = \"diadema\", ##                          new_ott_id = 4930522)"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"how-do-i-know-that-the-taxa-im-asking-for-is-the-correct-one","dir":"Articles","previous_headings":"FAQ","what":"How do I know that the taxa I’m asking for is the correct one?","title":"How to use rotl?","text":"function taxonomy_taxon_info() takes ott_ids arguments returns taxonomic information taxa. output can passed helpers functions extract relevant information. Let’s illustrate Diadema example cases, might also useful investigate taxonomic tree descending ott_id check ’s correct taxon determine species included Open Tree Taxonomy: default, function return taxa (including self, internal) descending ott_id also possible return phylo object.","code":"diadema_info <- taxonomy_taxon_info(631176) tax_rank(diadema_info) ## $`Garrettia (genus in Opisthokonta)` ## [1] \"genus\" ##  ## attr(,\"class\") ## [1] \"otl_rank\" \"list\" synonyms(diadema_info) ## $`Garrettia (genus in Opisthokonta)` ## [1] \"Centrechinus\" \"Diadema\"      \"Diamema\"      ##  ## attr(,\"class\") ## [1] \"otl_synonyms\" \"list\" tax_name(diadema_info) ## $`Garrettia (genus in Opisthokonta)` ## [1] \"Garrettia\" ##  ## attr(,\"class\") ## [1] \"otl_name\" \"list\" diadema_tax_tree <- taxonomy_subtree(631176) diadema_tax_tree ## $tip_label ##  [1] \"Garrettia_parva_ott6356094\"               ##  [2] \"Garrettia_rotella_ott6356095\"             ##  [3] \"Diadema_savignyi_ott395692\"               ##  [4] \"Diadema_palmeri_ott836860\"                ##  [5] \"Diadema_setosum_ott631175\"                ##  [6] \"Diadema_paucispinum_ott312263\"            ##  [7] \"unclassified_Diadema_ott7669081\"          ##  [8] \"Diadema_africanum_ott4147369\"             ##  [9] \"Diadema_antillarum_scensionis_ott220009\"  ## [10] \"Diadema_antillarum_antillarum_ott4147370\" ## [11] \"Diadema_mexicanum_ott639130\"              ## [12] \"Diademasp.SP04-BIO_4_JGLCO_AYott7072105\"  ## [13] \"Diademasp.SP03-BIO_3_JGLCO_AYott7072104\"  ## [14] \"Diademasp.SP02-BIO_2_JGLCO_AYott7072103\"  ## [15] \"Diadema_sp._DSM1_ott219999\"               ## [16] \"Diadema_sp._DSM6_ott771059\"               ## [17] \"Diademasp.ACOSTI-NIOTSU3ott7072098\"       ## [18] \"Diademasp.LI03-BIO_JGLCO_AYott7072102\"    ## [19] \"Diademasp.LI02-BIO_JGLCO_AYott7072101\"    ## [20] \"Diademasp.LI01-BIO_JGLCO_AYott7072100\"    ## [21] \"Diademasp.ACOSTI-NIOTSU4ott7072099\"       ## [22] \"Diadema_sp._seto35_ott66618\"              ## [23] \"Diadema_sp._seto18_ott66623\"              ## [24] \"Diadema_sp._seto19_ott66624\"              ## [25] \"Diadema_sp._seto38_ott66625\"              ## [26] \"Diadema_sp._DJN9_ott66626\"                ## [27] \"Diademasp.CS-2014ott5502179\"              ## [28] \"Diadema_sp._seto17_ott587478\"             ## [29] \"Diadema_sp._SETO15_ott587479\"             ## [30] \"Diadema_sp._dsm5_ott587480\"               ## [31] \"Diadema_sp._DSM4_ott587481\"               ## [32] \"Diadema_sp._DSM3_ott587482\"               ## [33] \"Diadema_sp._DSM2_ott587483\"               ## [34] \"Diadema_sp._seto10_ott587484\"             ## [35] \"Diadema_sp._seto9_ott587485\"              ## [36] \"Diadema_sp._DSM8_ott587486\"               ## [37] \"Diadema_sp._DSM7_ott587487\"               ## [38] \"Diadema_sp._seto16_ott312262\"             ## [39] \"Diadema_africana_ott5502180\"              ## [40] \"Diadema_principeana_ott5725746\"           ## [41] \"Diadema_vetus_ott5725747\"                 ## [42] \"Diadema_regnyi_ott7669077\"                ## [43] \"Diadema_amalthei_ott7669073\"              ## [44] \"Diadema_affine_ott7669072\"                ## [45] \"Diadema_subcomplanatum_ott7669079\"        ## [46] \"Diadema_ruppelii_ott7669078\"              ## [47] \"Diadema_calloviensis_ott7669074\"          ## [48] \"Diadema_megastoma_ott7669075\"             ## [49] \"Diadema_priscum_ott7669076\"               ## [50] \"Garrettia_biangulata_ott7669080\"          ## [51] \"Diadema_ascensionis_ott4950423\"           ## [52] \"Diadema_lobatum_ott4950422\"               ##  ## $edge_label ## [1] \"Diadema_antillarum_ott1022356\"  \"'Garrettia(genusinOpisthokonta\" ## [3] \"ott631176'\""},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"how-do-i-get-the-tree-for-a-particular-taxonomic-group","dir":"Articles","previous_headings":"FAQ","what":"How do I get the tree for a particular taxonomic group?","title":"How to use rotl?","text":"looking get tree particular taxonomic group, need first identify node id ott id, use tol_subtree() function: plot chunk unnamed-chunk-8","code":"mono_id <- tnrs_match_names(\"Monotremata\") mono_tree <- tol_subtree(ott_id = ott_id(mono_id)) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes with ## labels: Tachyglossus ott16047, Tachyglossus aculeatus ott16038, Ornithorhynchus ## ott962391, Obdurodon ott3615207, Steropodon ott3615209, Teinolophos ott4119276 plot(mono_tree)"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"how-do-i-find-trees-from-studies-focused-on-my-favourite-taxa","dir":"Articles","previous_headings":"FAQ","what":"How do I find trees from studies focused on my favourite taxa?","title":"How to use rotl?","text":"function studies_find_trees() allows user search studies matching specific criteria. function studies_properties() returns list properties can used search. Now know study_id, can ask meta data information associated study: Using get_study(\"pg_2550\") returns multiPhylo object (default) trees associated particular study, get_study_tree(\"pg_2550\", \"tree5513\") return one trees.","code":"furry_studies <- studies_find_studies(property = \"ot:focalCladeOTTTaxonName\", value = \"Mammalia\") furry_ids <- furry_studies$study_ids furry_meta <- get_study_meta(\"pg_2550\") get_publication(furry_meta) ## The citation for the source of the study ## [1] \"O'Leary, Maureen A., Marc Allard, Michael J. Novacek, Jin Meng, and John Gatesy. 2004. \\\"Building the mammalian sector of the tree of life: Combining different data and a discussion of divergence times for placental mammals.\\\" In: Cracraft J., & Donoghue M., eds. Assembling the Tree of Life. pp. 490-516. Oxford, United Kingdom, Oxford University Press.\" ## attr(,\"DOI\") ## [1] \"\" get_tree_ids(furry_meta) ## This study has 10 trees associated with it ##  [1] \"tree5513\" \"tree5515\" \"tree5516\" \"tree5517\" \"tree5518\" \"tree5519\" ##  [7] \"tree5520\" \"tree5521\" \"tree5522\" \"tree5523\" candidate_for_synth(furry_meta) ## None of these trees are yet included in the OTL ## NULL"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"the-tree-returned-by-the-api-has-duplicated-tip-labels-how-can-i-work-around-it","dir":"Articles","previous_headings":"FAQ","what":"The tree returned by the API has duplicated tip labels, how can I work around it?","title":"How to use rotl?","text":"may encounter following error message: message occurs duplicate labels allowed NEXUS format stricly enforced part code used rotl import trees memory. use version rotl recent 0.4.1, happen default function get_study_tree. happens another function, please let us know. easiest way work around save tree file, use APE read memory:","code":"Error in rncl(file = file, ...) : Taxon number 39 (coded by the token Pratia angulata) has already been encountered in this tree. Duplication of taxa in a tree is prohibited. get_study_tree(   study_id = \"pg_710\", tree_id = \"tree1277\",   tip_label = \"ott_taxon_name\", file = \"/tmp/tree.tre\",   file_format = \"newick\" ) tr <- ape::read.tree(file = \"/tmp/tree.tre\")"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"how-do-i-get-the-higher-taxonomy-for-a-given-taxa","dir":"Articles","previous_headings":"FAQ","what":"How do I get the higher taxonomy for a given taxa?","title":"How to use rotl?","text":"encounter taxon name familiar , might useful obtain higher taxonomy see fits tree life. can combine several taxonomy methods extract information easily.","code":"giant_squid <- tnrs_match_names(\"Architeuthis\") tax_lineage(taxonomy_taxon_info(ott_id(giant_squid), include_lineage = TRUE)) ## $`564394` ##          rank               name        unique_name  ott_id ## 1      family     Architeuthidae     Architeuthidae  564393 ## 2       order          Oegopsida          Oegopsida   43352 ## 3  superorder     Decapodiformes     Decapodiformes  854107 ## 4  infraclass       Neocoleoidea       Neocoleoidea  329546 ## 5    subclass          Coleoidea          Coleoidea    7371 ## 6       class        Cephalopoda        Cephalopoda    7368 ## 7      phylum           Mollusca           Mollusca  802117 ## 8     no rank     Lophotrochozoa     Lophotrochozoa  155737 ## 9     no rank        Protostomia        Protostomia  189832 ## 10    no rank          Bilateria          Bilateria  117569 ## 11    no rank          Eumetazoa          Eumetazoa  641038 ## 12    kingdom            Metazoa            Metazoa  691846 ## 13    no rank            Holozoa            Holozoa 5246131 ## 14    no rank       Opisthokonta       Opisthokonta  332573 ## 15     domain          Eukaryota          Eukaryota  304358 ## 16    no rank cellular organisms cellular organisms   93302 ## 17    no rank               life               life  805080"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"why-are-ott-ids-discovered-with-rotl-missing-from-an-induced-subtree","dir":"Articles","previous_headings":"FAQ","what":"Why are OTT IDs discovered with rotl missing from an induced subtree?","title":"How to use rotl?","text":"taxonomic names can retrieved taxonomic name resolution service part Open Tree’s synthesis tree. usually traditional higher-level taxa found paraphyletic. instance, wanted fetch tree relating three birds go Turkducken well pork used stuffing, might search turkey, duck, chicken, pork genera: OTT ids genus, however, tried get induced subtree results, get error: error message suggests, taxa found synthetic tree. occurs 2 main reasons: either taxa invalid, part group monophyletic synthetic tree. two ways get around issue: (1) removing taxa part Open Tree; (2) using complete species name.","code":"turducken <- c(\"Meleagris\", \"Anas\", \"Gallus\", \"Sus\") taxa <- tnrs_match_names(turducken, context = \"Animals\") ## Warning in tnrs_match_names(turducken, context = \"Animals\"): partial argument ## match of 'context' to 'context_name' taxa ##   search_string unique_name approximate_match ott_id is_synonym flags ## 1     meleagris   Meleagris             FALSE 446481      FALSE       ## 2          anas        Anas             FALSE 765185      FALSE       ## 3        gallus      Gallus             FALSE 153562      FALSE       ## 4           sus         Sus             FALSE 730021      FALSE       ##   number_matches ## 1              2 ## 2              1 ## 3              3 ## 4              1 tr <- tol_induced_subtree(ott_id(taxa)) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes with ## labels: Mammalia ott244265, Theria (subclass in Deuterostomia) ott229558, ## Eutheria (in Deuterostomia) ott683263, mrcaott42ott3607383, mrcaott42ott3607429, ## mrcaott42ott3607455, mrcaott42ott72667, Boreoeutheria ott5334778, Laurasiatheria ## ott392223, mrcaott1548ott4697, mrcaott1548ott6790, mrcaott1548ott3607484, ## mrcaott1548ott4942380, mrcaott1548ott4942547, mrcaott1548ott3021, Artiodactyla ## ott622916, mrcaott1548ott21987, Suina ott916745, Suidae ott730008, Sauropsida ## ott639642, Sauria ott329823, mrcaott246ott2982, mrcaott246ott31216, ## mrcaott246ott3602822, mrcaott246ott4143599, mrcaott246ott3600976, ## mrcaott246ott4132107, Aves ott81461, Neognathae ott241846, Galliformes ## ott837585, mrcaott4765ott6520194, mrcaott4765ott109888, mrcaott4765ott75785, ## mrcaott4765ott104461, mrcaott4765ott151684, mrcaott4765ott54193, ## mrcaott4765ott49319, mrcaott4765ott3596087, mrcaott4765ott415487, ## mrcaott4765ott51354, mrcaott4765ott53700, mrcaott4765ott446490, Meleagridinae ## ott781250, mrcaott49310ott102705, mrcaott49310ott51349, mrcaott49310ott153554, ## mrcaott153554ott867027, Anseriformes ott241841, mrcaott30843ott714464, Anatidae ## ott765193, mrcaott30843ott75874, mrcaott30843ott962771, mrcaott30843ott145504, ## mrcaott30843ott30847, mrcaott30843ott196654, mrcaott30843ott30845"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"removing-the-taxa-missing-from-the-synthetic-tree","dir":"Articles","previous_headings":"FAQ > Why are OTT IDs discovered with rotl missing from an induced subtree?","what":"Removing the taxa missing from the synthetic tree","title":"How to use rotl?","text":"help situation, rotl provides way identify OTT ids part synthetic tree. function is_in_tree() takes output ott_id() function returns vector logical indicating whether taxa part synthetic tree. can use keep taxa appear synthetic tree:","code":"in_tree <- is_in_tree(ott_id(taxa)) in_tree ## Meleagris      Anas    Gallus       Sus  ##      TRUE     FALSE      TRUE      TRUE tr <- tol_induced_subtree(ott_id(taxa)[in_tree]) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes with ## labels: Mammalia ott244265, Theria (subclass in Deuterostomia) ott229558, ## Eutheria (in Deuterostomia) ott683263, mrcaott42ott3607383, mrcaott42ott3607429, ## mrcaott42ott3607455, mrcaott42ott72667, Boreoeutheria ott5334778, Laurasiatheria ## ott392223, mrcaott1548ott4697, mrcaott1548ott6790, mrcaott1548ott3607484, ## mrcaott1548ott4942380, mrcaott1548ott4942547, mrcaott1548ott3021, Artiodactyla ## ott622916, mrcaott1548ott21987, Suina ott916745, Suidae ott730008, Sauropsida ## ott639642, Sauria ott329823, mrcaott246ott2982, mrcaott246ott31216, ## mrcaott246ott3602822, mrcaott246ott4143599, mrcaott246ott3600976, ## mrcaott246ott4132107, Aves ott81461, Neognathae ott241846, Galloanserae ## ott5839486, Galliformes ott837585, mrcaott4765ott6520194, mrcaott4765ott109888, ## mrcaott4765ott75785, mrcaott4765ott104461, mrcaott4765ott151684, ## mrcaott4765ott54193, mrcaott4765ott49319, mrcaott4765ott3596087, ## mrcaott4765ott415487, mrcaott4765ott51354, mrcaott4765ott53700, ## mrcaott4765ott446490, Meleagridinae ott781250, mrcaott49310ott102705, ## mrcaott49310ott51349, mrcaott49310ott153554, mrcaott153554ott867027"},{"path":"https://docs.ropensci.org/rotl/articles/rotl.html","id":"using-the-full-taxonomic-names","dir":"Articles","previous_headings":"FAQ > Why are OTT IDs discovered with rotl missing from an induced subtree?","what":"Using the full taxonomic names","title":"How to use rotl?","text":"best way avoid problems specify complete species names (species lowest level classification Open Tree taxonomy guaranteed monophyletic): plot chunk unnamed-chunk-16","code":"turducken_spp <- c(\"Meleagris gallopavo\", \"Anas platyrhynchos\", \"Gallus gallus\", \"Sus scrofa\") taxa <- tnrs_match_names(turducken_spp, context = \"Animals\") ## Warning in tnrs_match_names(turducken_spp, context = \"Animals\"): partial ## argument match of 'context' to 'context_name' tr <- tol_induced_subtree(ott_id(taxa)) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes ## with labels: Mammalia ott244265, Theria (subclass in Deuterostomia) ## ott229558, Eutheria (in Deuterostomia) ott683263, mrcaott42ott3607383, ## mrcaott42ott3607429, mrcaott42ott3607455, mrcaott42ott72667, Boreoeutheria ## ott5334778, Laurasiatheria ott392223, mrcaott1548ott4697, mrcaott1548ott6790, ## mrcaott1548ott3607484, mrcaott1548ott4942380, mrcaott1548ott4942547, ## mrcaott1548ott3021, Artiodactyla ott622916, mrcaott1548ott21987, Suina ## ott916745, Suidae ott730008, Sus ott730021, Sauropsida ott639642, Sauria ## ott329823, mrcaott246ott2982, mrcaott246ott31216, mrcaott246ott3602822, ## mrcaott246ott4143599, mrcaott246ott3600976, mrcaott246ott4132107, Aves ## ott81461, Neognathae ott241846, Galliformes ott837585, mrcaott4765ott6520194, ## mrcaott4765ott109888, mrcaott4765ott75785, mrcaott4765ott104461, ## mrcaott4765ott151684, mrcaott4765ott54193, mrcaott4765ott49319, ## mrcaott4765ott3596087, mrcaott4765ott415487, mrcaott4765ott51354, ## mrcaott4765ott53700, mrcaott4765ott446490, Meleagridinae ott781250, Meleagris ## ott446481, mrcaott49310ott102705, mrcaott49310ott51349, mrcaott49310ott153554, ## mrcaott153554ott867027, Gallus ott153562, mrcaott153554ott153572, ## mrcaott153572ott240568, Anseriformes ott241841, mrcaott30843ott714464, Anatidae ## ott765193, mrcaott30843ott75874, mrcaott30843ott962771, mrcaott30843ott145504, ## mrcaott30843ott30847, mrcaott30843ott196654, mrcaott30843ott30845, ## mrcaott30845ott30850, mrcaott30850ott82420, mrcaott30850ott82414, ## mrcaott30850ott30858, mrcaott30850ott30855, mrcaott30850ott604172, ## mrcaott30850ott82410, mrcaott82410ott339494, mrcaott82410ott604175, ## mrcaott82410ott604182, mrcaott82410ott190881 plot(tr)"},{"path":"https://docs.ropensci.org/rotl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francois Michonneau. Author, maintainer. Joseph Brown. Author. David Winter. Author. Scott Chamberlain. Reviewer.","code":""},{"path":"https://docs.ropensci.org/rotl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Michonneau, F., Brown, J. W. Winter, D. J. (2016),              rotl: R package interact Open Tree Life data.              Methods Ecology Evolution. 7(12):1476-1481. doi:10.1111/2041-210X.12593 OpenTree et al. Open Tree Life Synthetic Tree.                     doi:0.5281/zenodo.39377411","code":"@Article{,   title = {{rotl}: an R package to interact with the Open Tree of Life data},   author = {Francois Michonneau and Joseph W. Brown and David J. Winter},   journal = {Methods in Ecology and Evolution},   year = {2016},   volume = {7},   number = {12},   pages = {1476-1481},   doi = {10.1111/2041-210X.12593}, } @Misc{,   title = {Open Tree of Life Synthetic Tree},   author = {{OpenTreeOfLife} and Benjamin Redelings and Luna Luisa Sanchez Reyes and Karen A. Cranston and Jim Allman and Mark T. Holder and Emily Jane McTavish},   year = {2019},   version = {12.3},   publisher = {Zenodo},   doi = {10.5281/zenodo.3937741},   url = {https://doi.org/10.5281/zenodo.3937741}, }"},{"path":"https://docs.ropensci.org/rotl/index.html","id":"rotl-an-r-interface-to-open-tree-api-","dir":"","previous_headings":"","what":"Interface to the Open Tree of Life API","title":"Interface to the Open Tree of Life API","text":"rotl R package interact Open Tree Life data APIs. initially developed part NESCENT/OpenTree/Arbor hackathon. Client libraries interact Open Tree Life API also exists Python Ruby.","code":""},{"path":"https://docs.ropensci.org/rotl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface to the Open Tree of Life API","text":"current stable version available CRAN, can installed typing following prompt R: want test development version, first need install remotes package. can install rotl using:","code":"install.packages(\"rotl\") install.packages(\"remotes\") remotes::install_github(\"ropensci/rotl\")"},{"path":"https://docs.ropensci.org/rotl/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Interface to the Open Tree of Life API","text":"three vignettes: Start checking “use rotl?” typing: vignette(\"rotl\", package=\"rotl\") installing package. explore can use rotl packages combine data trees Open Tree Life project typing: vignette(\"data_mashups\", package=\"rotl\"). vignette “Using Open Tree Synthesis comparative analysis” demonstrates can reproduce analysis published paper downloading tree used, data supplementary material: vignette(\"meta-analysis\", package=\"rotl\"). vignettes also available CRAN: use rotl?, Data mashups, Using Open Tree synthesis comparative analysis.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/index.html","id":"get-a-little-bit-of-the-big-open-tree-tree","dir":"","previous_headings":"Quick start","what":"Get a little bit of the big Open Tree tree","title":"Interface to the Open Tree of Life API","text":"Taxonomic names represented Open Tree numeric identifiers, ott_ids (Open Tree Taxonomy identifiers). extract portion tree Open Tree, first need find ott_ids set names using tnrs_match_names function: Now can get tree just tips:  code can summarized single pipe:","code":"library(rotl) apes <- c(\"Pongo\", \"Pan\", \"Gorilla\", \"Hoolock\", \"Homo\") (resolved_names <- tnrs_match_names(apes)) ##   search_string unique_name approximate_match score ott_id is_synonym ## 1         pongo       Pongo             FALSE     1 417949      FALSE ## 2           pan         Pan             FALSE     1 417957      FALSE ## 3       gorilla     Gorilla             FALSE     1 417969      FALSE ## 4       hoolock     Hoolock             FALSE     1 712902      FALSE ## 5          homo        Homo             FALSE     1 770309      FALSE ##            flags number_matches ## 1                             2 ## 2 sibling_higher              2 ## 3 sibling_higher              1 ## 4                             1 ## 5 sibling_higher              1 tr <- tol_induced_subtree(ott_ids = ott_id(resolved_names)) ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes with ## labels: mrcaott83926ott6145147, mrcaott83926ott3607728, mrcaott83926ott3607876, ## mrcaott83926ott3607873, mrcaott83926ott3607687, mrcaott83926ott3607716, ## mrcaott83926ott3607689, mrcaott83926ott3607732, mrcaott770295ott3607719, ## mrcaott770295ott3607692, Ponginae ott1082538, Hylobatidae ott166544 plot(tr) library(magrittr) ## or expressed as a pipe: c(\"Pongo\", \"Pan\", \"Gorilla\", \"Hoolock\", \"Homo\") %>%   tnrs_match_names() %>%   ott_id() %>%   tol_induced_subtree() %>%   plot() ## Warning in collapse_singles(tr, show_progress): Dropping singleton nodes with ## labels: mrcaott83926ott6145147, mrcaott83926ott3607728, mrcaott83926ott3607876, ## mrcaott83926ott3607873, mrcaott83926ott3607687, mrcaott83926ott3607716, ## mrcaott83926ott3607689, mrcaott83926ott3607732, mrcaott770295ott3607719, ## mrcaott770295ott3607692, Ponginae ott1082538, Hylobatidae ott166544"},{"path":"https://docs.ropensci.org/rotl/index.html","id":"citation-and-manuscript","dir":"","previous_headings":"","what":"Citation and Manuscript","title":"Interface to the Open Tree of Life API","text":"cite rotl publications pleases use: Michonneau, F., Brown, J. W. Winter, D. J. (2016), rotl: R package interact Open Tree Life data. Methods Ecology Evolution. 7(12):1476-1481. doi: 10.1111/2041-210X.12593 may also want cite paper Open Tree Life Hinchliff, C. E., et al. (2015). Synthesis phylogeny taxonomy comprehensive tree life. Proceedings National Academy Sciences 112.41 (2015): 12764-12769 doi: 10.1073/pnas.1423041112 manuscript Methods Ecology Evolution includes additional examples use package. manuscript code contains also hosted GitHub : https://github.com/fmichonneau/rotl-ms","code":""},{"path":"https://docs.ropensci.org/rotl/index.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"Interface to the Open Tree of Life API","text":"Starting v3.0.0 package, major minor version numbers (first 2 digits version number) matched API. patch number (3rd digit version number) used reflect bug fixes changes independent changes API. rotl can used access versions API (available) likely high level functions work. Instead, need parse output using “raw” returns unexported low-level functions (prefixed .). instance use tnrs/match_names endpoint v2 API:","code":"rotl:::.tnrs_match_names(c(\"pan\", \"pango\", \"gorilla\", \"hoolock\", \"homo\"), otl_v = \"v2\")"},{"path":"https://docs.ropensci.org/rotl/index.html","id":"code-of-conduct","dir":"","previous_headings":"Versioning","what":"Code of Conduct","title":"Interface to the Open Tree of Life API","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the trees associated with a particular study — get_study","title":"Get all the trees associated with a particular study — get_study","text":"Returns trees associated given study","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the trees associated with a particular study — get_study","text":"","code":"get_study(   study_id = NULL,   object_format = c(\"phylo\", \"nexml\"),   file_format,   file,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/get_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the trees associated with a particular study — get_study","text":"study_id study ID study interest (character) object_format class object query return (either phylo nexml). Ignored file_format specified. file_format format file generated (newick, nexus, nexml json). file file name output function saved. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the trees associated with a particular study — get_study","text":"file_format missing, object class  phylo nexml, otherwise logical indicating     whether file successfully created.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all the trees associated with a particular study — get_study","text":"file_format missing, function returns object class phylo ape package (default), object class nexml RNeXML package. Otherwise file_format can either newick, nexus, nexml json, function generate file selected format. case, file name needs provided using argument file. file name already exists, silently overwritten.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/get_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the trees associated with a particular study — get_study","text":"","code":"if (FALSE) { that_one_study <- get_study(study_id=\"pg_719\", object_format=\"phylo\") if (require(RNeXML)) { ## if RNeXML is installed get the object directly    nexml_study <- get_study(study_id=\"pg_719\", object_format=\"nexml\") } else { ## otherwise write it to a file    get_study(study_id=\"pg_719\", file_format=\"nexml\", file=tempfile(fileext=\".nexml\")) } }"},{"path":"https://docs.ropensci.org/rotl/reference/get_study_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Study Metadata — get_tree_ids","title":"Study Metadata — get_tree_ids","text":"Retrieve metadata study Open Tree Life datastore.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Study Metadata — get_tree_ids","text":"","code":"get_tree_ids(sm)  get_publication(sm)  candidate_for_synth(sm)  get_study_year(sm)  # S3 method for study_meta get_tree_ids(sm)  # S3 method for study_meta get_publication(sm)  # S3 method for study_meta candidate_for_synth(sm)  # S3 method for study_meta get_study_year(sm)  get_study_meta(study_id, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/get_study_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Study Metadata — get_tree_ids","text":"sm object created get_study_meta study_id study identifier (character) ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Study Metadata — get_tree_ids","text":"named-list containing metadata associated     study requested","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Study Metadata — get_tree_ids","text":"get_study_meta returns long list attributes studies contributing synthetic tree. help extraction relevant information list, several helper functions exists: get_tree_ids  identifiers trees   associated study get_publication  citation information   publication study. DOI (URL) study   available attribute returned object (.e.,   attr(object, \"DOI\") ) . candidate_for_synth  identifier tree(s)   study used synthetic tree. subset   result get_tree_ids.   get_study_year  year publication study.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Study Metadata — get_tree_ids","text":"","code":"if (FALSE) { req <- get_study_meta(\"pg_719\") get_tree_ids(req) candidate_for_synth(req) get_publication(req) get_study_year(req) }"},{"path":"https://docs.ropensci.org/rotl/reference/get_study_subtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Study Subtree — get_study_subtree","title":"Study Subtree — get_study_subtree","text":"Retrieve subtree specific tree Open Tree Life data store","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_subtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Study Subtree — get_study_subtree","text":"","code":"get_study_subtree(   study_id,   tree_id,   subtree_id,   object_format = c(\"phylo\"),   tip_label = c(\"original_label\", \"ott_id\", \"ott_taxon_name\"),   file_format,   file,   deduplicate = TRUE,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/get_study_subtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Study Subtree — get_study_subtree","text":"study_id study identifier (character) tree_id tree identifier (character) subtree_id, either node id specifies subtree “ingroup” returns ingroup subtree. object_format class object returned function (default, currently possibility phylo ape package) tip_label format tip labels. “original_label” (default) returns original labels provided study, “ott_id” labels replaced ott IDs, “ott_taxon_name” labels replaced Open Tree Taxonomy taxon name. file_format character, file format use save results query (possible values, ‘newick’ ‘nexus’). file character, path file name output written. deduplicate logical (default TRUE). tree returned study contains duplicated taxon names, made unique? normally illegal NEXUS/Newick tree strings contain duplicated tip names. workaround circumvent requirement. TRUE, duplicated tip labels appended _1, _2, etc. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_subtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Study Subtree — get_study_subtree","text":"","code":"if (FALSE) { small_tr <- get_study_subtree(study_id=\"pg_1144\", tree_id=\"tree5800\", subtree_id=\"node991044\") ingroup  <- get_study_subtree(study_id=\"pg_1144\", tree_id=\"tree5800\", subtree_id=\"ingroup\") nexus_file <- tempfile(fileext=\".nex\") get_study_subtree(study_id=\"pg_1144\", tree_id=\"tree5800\", subtree_id=\"ingroup\", file=nexus_file,                   file_format=\"nexus\") }"},{"path":"https://docs.ropensci.org/rotl/reference/get_study_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Study Tree — get_study_tree","title":"Study Tree — get_study_tree","text":"Returns specific tree within study","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Study Tree — get_study_tree","text":"","code":"get_study_tree(   study_id = NULL,   tree_id = NULL,   object_format = c(\"phylo\"),   tip_label = c(\"original_label\", \"ott_id\", \"ott_taxon_name\"),   file_format,   file,   deduplicate = TRUE,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/get_study_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Study Tree — get_study_tree","text":"study_id identifier study (character) tree_id identifier tree within study object_format class object returned (default currently possible value phylo ape package). tip_label format tip labels. “original_label” (default) returns original labels provided study, “ott_id” labels replaced ott IDs, “ott_taxon_name” labels replaced Open Tree Taxonomy taxon name. file_format format file generated (newick default, nexus, json). file file name output function saved. deduplicate logical (default TRUE). tree returned study contains duplicated taxon names, made unique? normally illegal NEXUS/Newick tree strings contain duplicated tip names. workaround circumvent requirement. TRUE, duplicated tip labels appended _1, _2, etc. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Study Tree — get_study_tree","text":"file_format missing, object class  phylo, otherwise logical indicating whether file     successfully created.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/get_study_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Study Tree — get_study_tree","text":"","code":"if (FALSE) {  tree <- get_study_tree(study_id=\"pg_1144\", tree_id=\"tree2324\")   ## comparison of the first few tip labels depending on the options used  head(get_study_tree(study_id=\"pg_1144\", tree_id=\"tree2324\", tip_label=\"original_label\")$tip.label)  head(get_study_tree(study_id=\"pg_1144\", tree_id=\"tree2324\", tip_label=\"ott_id\")$tip.label)  head(get_study_tree(study_id=\"pg_1144\", tree_id=\"tree2324\", tip_label=\"ott_taxon_name\")$tip.label) }"},{"path":"https://docs.ropensci.org/rotl/reference/is_in_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that OTT ids occur in the Synthetic Tree — is_in_tree","title":"Check that OTT ids occur in the Synthetic Tree — is_in_tree","text":"valid taxonomic names occur Synthetic Tree. convenience function allows check whether given Open Tree Taxonomy identifier (OTT id) tree. taxonomic name may occur synthetic tree (1) extinct invalid taxon, (2) part group monophyletic tree.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/is_in_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that OTT ids occur in the Synthetic Tree — is_in_tree","text":"","code":"is_in_tree(ott_ids, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/is_in_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that OTT ids occur in the Synthetic Tree — is_in_tree","text":"ott_ids vector Open Tree Taxonomy identifiers ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/is_in_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that OTT ids occur in the Synthetic Tree — is_in_tree","text":"named logical vector. TRUE indicates OTT     id synthetic tree, FALSE .","code":""},{"path":"https://docs.ropensci.org/rotl/reference/is_in_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that OTT ids occur in the Synthetic Tree — is_in_tree","text":"","code":"if (FALSE) {   plant_families <- c(\"Asteraceae\", \"Solanaceae\", \"Poaceae\", \"Amaranthaceae\",                       \"Zamiaceae\", \"Araceae\", \"Juncaceae\")   matched_names <- tnrs_match_names(plant_families)   ## This fails because some ott ids are not in the tree   ## plant_tree <- tol_induced_subtree(ott_id(matched_names))   ## So let's check which ones are actually in the tree first:   in_tree <- is_in_tree(ott_id(matched_names))   ## This now works:   plant_tree <- tol_induced_subtree(ott_id(matched_names)[in_tree]) }"},{"path":"https://docs.ropensci.org/rotl/reference/list_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"List trees ids in objects returned by\nstudies_find_studies and\nstudies_find_trees. — list_trees","title":"List trees ids in objects returned by\nstudies_find_studies and\nstudies_find_trees. — list_trees","text":"list_trees returns trees associated particular study used object returned studies_find_studies, trees match search criteria used objects returned studies_find_trees.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/list_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List trees ids in objects returned by\nstudies_find_studies and\nstudies_find_trees. — list_trees","text":"","code":"list_trees(matched_studies, ...)  # S3 method for matched_studies list_trees(matched_studies, study_id, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/list_trees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List trees ids in objects returned by\nstudies_find_studies and\nstudies_find_trees. — list_trees","text":"matched_studies object created studies_find_trees studies_find_studies. ... Currently unused study_id study_id listed object returned studies_find_trees","code":""},{"path":"https://docs.ropensci.org/rotl/reference/list_trees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List trees ids in objects returned by\nstudies_find_studies and\nstudies_find_trees. — list_trees","text":"list_trees returns list tree_ids     study match requested criteria. study_id provided, trees study returned     vector.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/match_names-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"ott_id and flags for taxonomic names matched\n    by tnrs_match_names — ott_id.match_names","title":"ott_id and flags for taxonomic names matched\n    by tnrs_match_names — ott_id.match_names","text":"rotl provides collection functions allows users extract relevant information object generated tnrs_match_names function.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/match_names-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ott_id and flags for taxonomic names matched\n    by tnrs_match_names — ott_id.match_names","text":"","code":"# S3 method for match_names ott_id(tax, row_number, taxon_name, ott_id, ...)  # S3 method for match_names flags(tax, row_number, taxon_name, ott_id, ...)  flags(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/match_names-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ott_id and flags for taxonomic names matched\n    by tnrs_match_names — ott_id.match_names","text":"tax object returned tnrs_match_names row_number row number corresponding name list synonyms taxon_name taxon name corresponding name list synonyms ott_id ott id corresponding name list synonyms ... currently ignored","code":""},{"path":"https://docs.ropensci.org/rotl/reference/match_names-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ott_id and flags for taxonomic names matched\n    by tnrs_match_names — ott_id.match_names","text":"list ott ids flags taxonomic names     matched tnrs_match_names, either one     names.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/match_names-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ott_id and flags for taxonomic names matched\n    by tnrs_match_names — ott_id.match_names","text":"methods optionally accept one arguments row_number, taxon_name ott_id retrieve corresponding information one matches object returned tnrs_match_names function. arguments provided, methods can return information matches currently listed object returned tnrs_match_names.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/match_names-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ott_id and flags for taxonomic names matched\n    by tnrs_match_names — ott_id.match_names","text":"","code":"if (FALSE) {   rsp <- tnrs_match_names(c(\"Diadema\", \"Tyrannosaurus\"))   rsp$ott_id    # ott id for match currently in use   ott_id(rsp)   # similar as above but elements are named    ## flags() is useful for instance to determine if a taxon is extinct   flags(rsp, taxon_name=\"Tyrannosaurus\") }"},{"path":"https://docs.ropensci.org/rotl/reference/match_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect and Update alternative matches for a name returned\n    by tnrs_match_names — inspect.match_names","title":"Inspect and Update alternative matches for a name returned\n    by tnrs_match_names — inspect.match_names","text":"Taxonomic names may different meanings different taxonomic contexts, genus name can applied animals plants instance. Additionally, meaning taxonomic name may change throughout history, may referred different taxon past. cases, given names might multiple matches Open Tree Taxonomy. functions allow users inspect (update) alternative meaning given name current taxonomic status according Open Tree Taxonomy.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/match_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect and Update alternative matches for a name returned\n    by tnrs_match_names — inspect.match_names","text":"","code":"# S3 method for match_names inspect(response, row_number, taxon_name, ott_id, ...)  inspect(response, ...)  # S3 method for match_names update(object, row_number, taxon_name, ott_id, new_row_number, new_ott_id, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/match_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect and Update alternative matches for a name returned\n    by tnrs_match_names — inspect.match_names","text":"response object generated tnrs_match_names function row_number row number corresponding name inspect taxon_name taxon name corresponding name inspect ott_id ott id corresponding name inspect ... currently ignored object object created tnrs_match_names new_row_number row number output inspect replace taxa specified row_number, taxon_name, ott_id. new_ott_id ott id taxon replace taxa specified row_number, taxon_name, ott_id.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/match_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect and Update alternative matches for a name returned\n    by tnrs_match_names — inspect.match_names","text":"data frame","code":""},{"path":"https://docs.ropensci.org/rotl/reference/match_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inspect and Update alternative matches for a name returned\n    by tnrs_match_names — inspect.match_names","text":"inspect alternative taxonomic meanings given name, need provide object resulting call tnrs_match_names function, well one either row number corresponding name object, name (used original query), ott_id listed name. update one name, also need provide row number name replaced appear ott id.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/match_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect and Update alternative matches for a name returned\n    by tnrs_match_names — inspect.match_names","text":"","code":"if (FALSE) {    matched_names <- tnrs_match_names(c(\"holothuria\", \"diadema\", \"boletus\"))    inspect(matched_names, taxon_name=\"diadema\")    new_matched_names <- update(matched_names, taxon_name=\"diadema\",                                new_ott_id = 631176)    new_matched_names    }"},{"path":"https://docs.ropensci.org/rotl/reference/rotl.html","id":null,"dir":"Reference","previous_headings":"","what":"An Interface to the Open Tree of Life API — rotl","title":"An Interface to the Open Tree of Life API — rotl","text":"Open Tree Life NSF funded project generating online, comprehensive phylogenetic tree 1.8 million species. rotl provides interface allows query retrieve parts tree life interest .","code":""},{"path":"https://docs.ropensci.org/rotl/reference/rotl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An Interface to the Open Tree of Life API — rotl","text":"rotl provides function end points API provides. documentation API available : https://github.com/OpenTreeOfLife/opentree/wiki/Open-Tree--Life-APIs","code":""},{"path":"https://docs.ropensci.org/rotl/reference/rotl.html","id":"customizing-api-calls","dir":"Reference","previous_headings":"","what":"Customizing API calls","title":"An Interface to the Open Tree of Life API — rotl","text":"functions use API end points can take 2 arguments     customize API call passed ... arguments.  otl_v   argument controls version     API call using. default value     argument call non-exported function     otl_version() returns current version     Open Tree Life APIs (v2). dev_url   argument controls whether use     development version API. default, dev_url     set FALSE, using dev_url = TRUE     function calls use development version. example, use development version API,     use: tnrs_match_names(\"anas\", dev_url=TRUE) Additional arguments can also passed     GET POST methods.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/rotl.html","id":"acknowledgments","dir":"Reference","previous_headings":"","what":"Acknowledgments","title":"An Interface to the Open Tree of Life API — rotl","text":"package started Open Tree Life Hackathon     organized OpenTree Life, NESCent Hackathon     Interoperability Phylogenetic group, Arbor.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/source_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List of studies used in the Tree of Life — source_list","title":"List of studies used in the Tree of Life — source_list","text":"Retrieve detailed information list studies used Tree Life.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/source_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of studies used in the Tree of Life — source_list","text":"","code":"source_list(tax, ...)  # S3 method for tol_summary source_list(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/source_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of studies used in the Tree of Life — source_list","text":"tax list containing source_id_map slot. ... additional arguments (currently unused)","code":""},{"path":"https://docs.ropensci.org/rotl/reference/source_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of studies used in the Tree of Life — source_list","text":"data frame","code":""},{"path":"https://docs.ropensci.org/rotl/reference/source_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of studies used in the Tree of Life — source_list","text":"function takes object resulting     tol_about(study_list = TRUE), tol_mrca(),     tol_node_info(), returns data frame listing     tree_id, study_id git_sha     studies currently included Tree Life.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/strip_ott_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip OTT ids from tip labels — strip_ott_ids","title":"Strip OTT ids from tip labels — strip_ott_ids","text":"Strip OTT ids tip labels","code":""},{"path":"https://docs.ropensci.org/rotl/reference/strip_ott_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip OTT ids from tip labels — strip_ott_ids","text":"","code":"strip_ott_ids(tip_labels, remove_underscores = FALSE)"},{"path":"https://docs.ropensci.org/rotl/reference/strip_ott_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip OTT ids from tip labels — strip_ott_ids","text":"tip_labels character vector containing tip labels (likely tip.label element tree returned tol_induced_subtree remove_underscores logical (defaults FALSE). set TRUE underscores tip labels converted spaces","code":""},{"path":"https://docs.ropensci.org/rotl/reference/strip_ott_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip OTT ids from tip labels — strip_ott_ids","text":"character vector containing contents  tip_labels OTT ids removed.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/strip_ott_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip OTT ids from tip labels — strip_ott_ids","text":"","code":"if (FALSE) { genera <- c(\"Perdix\", \"Setophaga\", \"Cinclus\", \"Struthio\") tr <- tol_induced_subtree(ott_ids=c(102710, 285198, 267845, 292466)) tr$tip.label %in% genera tr$tip.label <- strip_ott_ids(tr$tip.label) tr$tip.label %in% genera }"},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a Study — studies_find_studies","title":"Find a Study — studies_find_studies","text":"Return identifiers studies match given properties","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a Study — studies_find_studies","text":"","code":"studies_find_studies(   property = NULL,   value = NULL,   verbose = FALSE,   exact = FALSE,   detailed = TRUE,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_studies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a Study — studies_find_studies","text":"property property searched (character) value property value searched (character) verbose output include metadata (logical default FALSE) exact exact matching used? (logical, default FALSE) detailed TRUE (default), function return data frame summarizes information study (see ‘Value’). Otherwise, returns study identifiers. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a Study — studies_find_studies","text":"detailed=TRUE, function returns data frame     listing study id (study_ids), number trees     associated study (n_trees), tree ids (    5) associated studies (tree_ids),     tree id candidate synthetic tree     (candidate), year publication study     (study_year), title publication     study (title), DOI (Digital Object Identifier)     study (study_doi). detailed=FALSE, function returns data frame     single column containing study identifiers.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a Study — studies_find_studies","text":"","code":"if (FALSE) { ## To match a study for which the identifier is already known one_study <- studies_find_studies(property=\"ot:studyId\", value=\"pg_719\") list_trees(one_study)  ## To find studies pertaining to Mammals mammals <- studies_find_studies(property=\"ot:focalCladeOTTTaxonName\",                                 value=\"mammalia\") ## To extract the tree identifiers for each of the studies list_trees(mammals) ## ... or for a given study list_trees(mammals, \"ot_308\")  ## Just the identifiers without other information about the studies mammals <- studies_find_studies(property=\"ot:focalCladeOTTTaxonName\",                                 value=\"mammalia\", detailed=FALSE) }"},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Trees — studies_find_trees","title":"Find Trees — studies_find_trees","text":"Return list studies trees match given set properties","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Trees — studies_find_trees","text":"","code":"studies_find_trees(   property = NULL,   value = NULL,   verbose = FALSE,   exact = FALSE,   detailed = TRUE,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_trees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Trees — studies_find_trees","text":"property property searched (character) value property-value searched (character) verbose output include metadata? (logical, default FALSE) exact exact matching used value? (logical, default FALSE) detailed detailed report provided? TRUE (default), output include metadata study include trees matching property. Otherwise, information trees provided. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_trees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Trees — studies_find_trees","text":"data frame summarizes trees found (    associated studies) requested criteria. study     5 trees, tree_ids first ones     shown, followed ... indicate     present. detailed=FALSE, data frame include     study ids study (study_ids), number trees     study match search criteria     (n_matched_trees), tree ids match search     criteria (match_tree_ids). detailed=TRUE, addition fields listed     , data frame also contain total number     trees associated study (n_trees), tree     ids associated study (tree_ids), tree id     potential candidate inclusion synthetic     tree () (candidate), year study     published (study_year), title study     (title), DOI study (study_doi).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_trees.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Trees — studies_find_trees","text":"list possible values used values argument property can found using function studies_properties.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/studies_find_trees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Trees — studies_find_trees","text":"","code":"if (FALSE) { res <- studies_find_trees(property=\"ot:ottTaxonName\", value=\"Drosophila\",                           detailed=FALSE) ## summary of the trees and associated studies that match this criterion res ## With metadata about the studies (default) res <- studies_find_trees(property=\"ot:ottTaxonName\", value=\"Drosophila\",                           detailed=TRUE) ## The list of trees for each study that match the search criteria list_trees(res) ## the trees for a given study list_trees(res, study_id = \"pg_2769\") }"},{"path":"https://docs.ropensci.org/rotl/reference/studies_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Properties of the Studies — studies_properties","title":"Properties of the Studies — studies_properties","text":"Return list study properties can used search studies trees used synthetic tree.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properties of the Studies — studies_properties","text":"","code":"studies_properties(...)"},{"path":"https://docs.ropensci.org/rotl/reference/studies_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Properties of the Studies — studies_properties","text":"... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Properties of the Studies — studies_properties","text":"list study properties can used find     studies trees contributing synthetic tree.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/studies_properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Properties of the Studies — studies_properties","text":"list returned 2 elements tree_properties studies_properties. elements lists additional arguments customize API request properties can used search trees studies contributing synthetic tree. definitions properties available https://github.com/OpenTreeOfLife/phylesystem-api/wiki/NexSON","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/studies_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Properties of the Studies — studies_properties","text":"","code":"if (FALSE) {  all_the_properties <- studies_properties()  unlist(all_the_properties$tree_properties) }"},{"path":"https://docs.ropensci.org/rotl/reference/study_external_IDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get external identifiers for data associated with an Open Tree study — study_external_IDs","title":"Get external identifiers for data associated with an Open Tree study — study_external_IDs","text":"Data associated studies contributing Open Tree synthesis may available databases. particular, trees alignments may available treebase DNA sequences bibliographic information associated given study may available NCBI. function retrieves information given study.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/study_external_IDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get external identifiers for data associated with an Open Tree study — study_external_IDs","text":"","code":"study_external_IDs(study_id)"},{"path":"https://docs.ropensci.org/rotl/reference/study_external_IDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get external identifiers for data associated with an Open Tree study — study_external_IDs","text":"study_id open tree study ID","code":""},{"path":"https://docs.ropensci.org/rotl/reference/study_external_IDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get external identifiers for data associated with an Open Tree study — study_external_IDs","text":"study_external_data object (inherits list) contains following. doi, character, DOI paper describing study external_data_url, character, URL external data repository (e.g. treebase entry) one exists. pubmed_id character, unique ID study NCBI's pubmed database popset_ids character, vector IDs NCBI's popset database nucleotide_ids character, vector IDs NCBI's nucleotide database","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/study_external_IDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get external identifiers for data associated with an Open Tree study — study_external_IDs","text":"","code":"if (FALSE) { flies <- studies_find_studies(property=\"ot:focalCladeOTTTaxonName\", value=\"Drosophilidae\") study_external_IDs(flies[2,]$study_ids) }"},{"path":"https://docs.ropensci.org/rotl/reference/synonyms.match_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List the synonyms for a given name — synonyms.match_names","title":"List the synonyms for a given name — synonyms.match_names","text":"querying Taxonomic Name Resolution Services particular taxonomic name, API returns possible matches names include queried name possible synonym. function allows explore synonyms accepted name, allows determine name queried returning accepted synonym.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/synonyms.match_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the synonyms for a given name — synonyms.match_names","text":"","code":"# S3 method for match_names synonyms(tax, row_number, taxon_name, ott_id, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/synonyms.match_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the synonyms for a given name — synonyms.match_names","text":"tax data frame generated tnrs_match_names function row_number row number corresponding name list synonyms taxon_name taxon name corresponding name list synonyms ott_id ott id corresponding name list synonyms ... currently ignored","code":""},{"path":"https://docs.ropensci.org/rotl/reference/synonyms.match_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the synonyms for a given name — synonyms.match_names","text":"list whose elements synonym names (vectors     character) taxonomic names match query (    names elements list).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/synonyms.match_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List the synonyms for a given name — synonyms.match_names","text":"list synonyms given taxonomic name, need provide object resulting call tnrs_match_names function, well one either row number corresponding name object, name (used original query), ott_id listed name. Otherwise, synonyms currently matched names returned.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/synonyms.match_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the synonyms for a given name — synonyms.match_names","text":"","code":"if (FALSE) {    echino <- tnrs_match_names(c(\"Diadema\", \"Acanthaster\", \"Fromia\"))    ## These 3 calls are identical    synonyms(echino, taxon_name=\"Acanthaster\")    synonyms(echino, row_number=2)    synonyms(echino, ott_id=337928) }"},{"path":"https://docs.ropensci.org/rotl/reference/tax_lineage.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineage of a taxon — tax_lineage","title":"Lineage of a taxon — tax_lineage","text":"Extract lineage information (higher taxonomy) object returned taxonomy_taxon_info.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tax_lineage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineage of a taxon — tax_lineage","text":"","code":"tax_lineage(tax, ...)  # S3 method for taxon_info tax_lineage(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/tax_lineage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineage of a taxon — tax_lineage","text":"tax object created taxonomy_taxon_info using argument include_lineage=TRUE. ... additional arguments (currently unused).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tax_lineage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lineage of a taxon — tax_lineage","text":"list one slot per taxon contains data frame     3 columns: taxonomy rank, name, unique name     taxa included lineage taxon     root tree.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tax_lineage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lineage of a taxon — tax_lineage","text":"object passed function must created using argument include_lineage=TRUE.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxon_external_IDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get external identifiers for data associated with an Open Tree taxon — taxon_external_IDs","title":"Get external identifiers for data associated with an Open Tree taxon — taxon_external_IDs","text":"Open Tree taxonomy synthesis multiple reference taxonomies. function retrieves identifiers external taxonomic records contributed rank, position definition given Open Tree taxon.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxon_external_IDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get external identifiers for data associated with an Open Tree taxon — taxon_external_IDs","text":"","code":"taxon_external_IDs(taxon_id)"},{"path":"https://docs.ropensci.org/rotl/reference/taxon_external_IDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get external identifiers for data associated with an Open Tree taxon — taxon_external_IDs","text":"taxon_id open tree study ID","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxon_external_IDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get external identifiers for data associated with an Open Tree taxon — taxon_external_IDs","text":"data.frame row represents unique record external database. column \"source\" provides abbreviated name database, \"id\" unique ID record.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/taxon_external_IDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get external identifiers for data associated with an Open Tree taxon — taxon_external_IDs","text":"","code":"if (FALSE) {    gibbon_IDs <- taxon_external_IDs(712902) }"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Taxonomy — tax_rank","title":"Methods for Taxonomy — tax_rank","text":"Methods dealing objects containing taxonomic information (Taxonomy, TNRS endpoints)","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Taxonomy — tax_rank","text":"","code":"tax_rank(tax, ...)  ott_id(tax, ...)  synonyms(tax, ...)  tax_sources(tax, ...)  is_suppressed(tax, ...)  unique_name(tax, ...)  tax_name(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Taxonomy — tax_rank","text":"tax object returned taxonomy_taxon_info, taxonomy_mrca, tnrs_match_names ... additional arguments (see tnrs_match_names)","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for Taxonomy — tax_rank","text":"page generic methods. See help pages taxonomy_taxon_info, taxonomy_mrca, tnrs_match_names information.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_about.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about the Open Tree Taxonomy — taxonomy_about","title":"Information about the Open Tree Taxonomy — taxonomy_about","text":"Summary information Open Tree Taxonomy (OTT)","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_about.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about the Open Tree Taxonomy — taxonomy_about","text":"","code":"taxonomy_about(...)"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_about.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information about the Open Tree Taxonomy — taxonomy_about","text":"... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_about.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information about the Open Tree Taxonomy — taxonomy_about","text":"list following properties: weburl String. release page version     taxonomy. author String. author string. name String. name taxonomy. source String. full identifying information     version taxonomy. version String. version number taxonomy.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_about.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information about the Open Tree Taxonomy — taxonomy_about","text":"Return metadata information taxonomy . Currently, available metadata fairly sparse, includes (least) version, location complete taxonomy source files can downloaded.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_about.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information about the Open Tree Taxonomy — taxonomy_about","text":"","code":"if (FALSE) { taxonomy_about() }"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_mrca.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomic MRCA — taxonomy_mrca","title":"Taxonomic MRCA — taxonomy_mrca","text":"Taxonomic Least Inclusive Common Ancestor (MRCA)","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_mrca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomic MRCA — taxonomy_mrca","text":"","code":"taxonomy_mrca(ott_ids = NULL, ...)  # S3 method for taxon_mrca tax_rank(tax, ...)  # S3 method for taxon_mrca tax_name(tax, ...)  # S3 method for taxon_mrca ott_id(tax, ...)  # S3 method for taxon_mrca unique_name(tax, ...)  # S3 method for taxon_mrca tax_sources(tax, ...)  # S3 method for taxon_mrca flags(tax, ...)  # S3 method for taxon_mrca is_suppressed(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_mrca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomic MRCA — taxonomy_mrca","text":"ott_ids vector ott ids taxa whose MRCA found (numeric). ... additional arguments customize API request (see rotl package documentation). tax object generated taxonomy_mrca function","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_mrca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomic MRCA — taxonomy_mrca","text":"taxonomy_mrca  returns list     taxonomic information relating MRCA ott_ids     provided. tax_rank  returns character vector     taxonomic rank MRCA. tax_name  returns character vector     Open Tree Taxonomy name MRCA. ott_id  returns numeric vector ott id     MRCA.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_mrca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taxonomic MRCA — taxonomy_mrca","text":"Given set OTT ids, get taxon recent common ancestor (MRCA) identified taxa.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_mrca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomic MRCA — taxonomy_mrca","text":"","code":"if (FALSE) { req <- taxonomy_mrca(ott_ids=c(515698,590452,643717)) tax_rank(req) tax_name(req) ott_id(req) }"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_subtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy subtree — taxonomy_subtree","title":"Taxonomy subtree — taxonomy_subtree","text":"Given ott id, return inclusive taxonomic subtree descended specified taxon.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_subtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomy subtree — taxonomy_subtree","text":"","code":"taxonomy_subtree(   ott_id = NULL,   output_format = c(\"taxa\", \"newick\", \"phylo\", \"raw\"),   label_format = NULL,   file,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_subtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomy subtree — taxonomy_subtree","text":"ott_id ott id taxon interest. output_format format object returned. See ‘Return’ section. label_format Character. Defines label type; one “name”, “id”,  “name_and_id” (default). file file name save output function. Ignored unless output_format set “phylo”. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_subtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomy subtree — taxonomy_subtree","text":"file argument missing: “taxa”  list taxa names     (species) slot tip_label, higher-level taxonomy     (e.g., families, genera) slot edge_label, descending     taxa corresponding ott_id provided. “newick”  character vector containing     newick formatted string corresponding taxonomic     subtree ott_id provided. “phylo”  object class     phylo ape package. “raw”  direct output API,     .e., list element named ‘newick’     contains subtree newick formatted string. file argument provided ( output_format set “phylo”),     logical indicating whether file successfully created.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_subtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taxonomy subtree — taxonomy_subtree","text":"output function exported file, possible value output_format argument “newick”. file provided already exists, silently overwritten.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_subtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomy subtree — taxonomy_subtree","text":"","code":"if (FALSE) { req <- taxonomy_subtree(ott_id=515698) plot(taxonomy_subtree(ott_id=515698, output_format=\"phylo\")) }"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_taxon_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon information — taxonomy_taxon_info","title":"Taxon information — taxonomy_taxon_info","text":"Information taxa.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_taxon_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon information — taxonomy_taxon_info","text":"","code":"taxonomy_taxon_info(   ott_ids,   include_children = FALSE,   include_lineage = FALSE,   include_terminal_descendants = FALSE,   ... )  # S3 method for taxon_info tax_rank(tax, ...)  # S3 method for taxon_info tax_name(tax, ...)  # S3 method for taxon_info unique_name(tax, ...)  # S3 method for taxon_info synonyms(tax, ...)  # S3 method for taxon_info ott_id(tax, ...)  # S3 method for taxon_info tax_sources(tax, ...)  # S3 method for taxon_info is_suppressed(tax, ...)  # S3 method for taxon_info flags(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_taxon_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon information — taxonomy_taxon_info","text":"ott_ids ott ids taxon interest (numeric character containing numbers) include_children whether include information children taxon. Default FALSE. include_lineage whether include information higher level taxa include ott_ids. Default FALSE. include_terminal_descendants whether include list terminal ott_ids contained ott_ids provided. ... additional arguments customize API request (see rotl package documentation). tax object generated taxonomy_taxon_info function","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_taxon_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon information — taxonomy_taxon_info","text":"taxonomy_taxon_info returns list detailing     information taxa. tax_rank  tax_name return vector. synonyms returns     list whose elements synonyms  ott_id requested.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_taxon_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taxon information — taxonomy_taxon_info","text":"Given vector ott ids, taxonomy_taxon_info returns information specified taxa. functions tax_rank, tax_name, synonyms can extract information object created taxonomy_taxon_info().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/taxonomy_taxon_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon information — taxonomy_taxon_info","text":"","code":"if (FALSE) { req <- taxonomy_taxon_info(ott_id=515698) tax_rank(req) tax_name(req) synonyms(req) }"},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_contexts.html","id":null,"dir":"Reference","previous_headings":"","what":"TNRS contexts — tnrs_contexts","title":"TNRS contexts — tnrs_contexts","text":"function returns list pre-defined taxonomic contexts (.e. clades) can used limit scope tnrs queries.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_contexts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TNRS contexts — tnrs_contexts","text":"","code":"tnrs_contexts(...)"},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_contexts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TNRS contexts — tnrs_contexts","text":"... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_contexts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TNRS contexts — tnrs_contexts","text":"Returns invisibly list major clades (e.g.,     animals, microbes, plants, fungi, life) whose elements     contains possible contexts.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_contexts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TNRS contexts — tnrs_contexts","text":"Taxonomic contexts available limit scope TNRS searches. contexts correspond uncontested higher taxa 'Animals' 'Land plants'. service returns list containing available taxonomic context names, may used input (via context_name argument functions) limit search scope services including tnrs_match_names.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_infer_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer the taxonomic context from a list of names — tnrs_infer_context","title":"Infer the taxonomic context from a list of names — tnrs_infer_context","text":"Return taxonomic context given list taxonomic names","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_infer_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer the taxonomic context from a list of names — tnrs_infer_context","text":"","code":"tnrs_infer_context(names = NULL, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_infer_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer the taxonomic context from a list of names — tnrs_infer_context","text":"names Vector taxon names. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_infer_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer the taxonomic context from a list of names — tnrs_infer_context","text":"list including context name, context ott id     possibly names query ambiguous     taxonomic meaning query.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_infer_context.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer the taxonomic context from a list of names — tnrs_infer_context","text":"Find least inclusive taxonomic context includes unambiguous names input set. Unambiguous names names exact matches non-homonym taxa. Ambiguous names (without exact matches non-homonym taxa) indicated results.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_infer_context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer the taxonomic context from a list of names — tnrs_infer_context","text":"","code":"if (FALSE) { res <- tnrs_infer_context(names=c(\"Stellula calliope\", \"Struthio camelus\")) }"},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_match_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Match names to the Open Tree Taxonomy — tnrs_match_names","title":"Match names to the Open Tree Taxonomy — tnrs_match_names","text":"Match taxonomic names Open Tree Taxonomy.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_match_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match names to the Open Tree Taxonomy — tnrs_match_names","text":"","code":"tnrs_match_names(   names = NULL,   context_name = \"All life\",   do_approximate_matching = TRUE,   ids = NULL,   include_suppressed = FALSE,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_match_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match names to the Open Tree Taxonomy — tnrs_match_names","text":"names taxon names queried. Currently limited 10,000 names exact matches 2,500 names approximate matches (character vector) context_name name taxonomic context searched (length-one character vector NULL). Must match (case sensitive) one values returned tnrs_contexts. Default \"life\". do_approximate_matching logical indicating whether perform approximate string (.k.. “fuzzy”) matching. Using FALSE greatly improve speed. Default, however, TRUE. ids vector ids use identifying names. assigned name names array. ids provided, ids names must identical length. include_suppressed Ordinarily, quasi-taxa, incertae sedis buckets non-OTUs, suppressed TNRS results. parameter true, quasi-taxa allowed possible TNRS results. ... additional arguments customize API request (see rotl package documentation).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_match_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match names to the Open Tree Taxonomy — tnrs_match_names","text":"data frame summarizing results query. original   query output appended attribute returned object (can   obtained using attr(object, \"original_response\")).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_match_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match names to the Open Tree Taxonomy — tnrs_match_names","text":"Accepts one taxonomic names returns information potential matches names known taxa Open Tree Taxonomy. service uses taxonomic contexts disambiguate homonyms misspelled names; context may specified using context_name argument. default value context_name \"life\". context specified (.e., context_name set NULL), context inferred (.e., shallowest taxonomic context contains unambiguous names input). Taxonomic contexts uncontested higher taxa selected allow limits applied scope TNRS searches (e.g. 'match names within flowering plants'). context identified (either user-specified inferred), taxon name matches performed taxa within context. list available taxonomic contexts, see tnrs_contexts. name considered unambiguous synonym one exact match taxon name entire taxonomy. name search returns multiple matches, taxon highest match score returned. name returned one intended, can use inspect function check taxa returned search. Getting Started vignette information . Several functions listed ‘See also’ section can used inspect manipulate object generated function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/tnrs_match_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match names to the Open Tree Taxonomy — tnrs_match_names","text":"","code":"if (FALSE) {  deuterostomes <- tnrs_match_names(names=c(\"echinodermata\", \"xenacoelomorpha\",                                             \"chordata\", \"hemichordata\")) }"},{"path":"https://docs.ropensci.org/rotl/reference/tol_about.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about the Tree of Life — tol_about","title":"Information about the Tree of Life — tol_about","text":"Basic information Open Tree Life (synthetic tree)","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_about.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about the Tree of Life — tol_about","text":"","code":"tol_about(include_source_list = FALSE, ...)  # S3 method for tol_summary tax_rank(tax, ...)  # S3 method for tol_summary tax_sources(tax, ...)  # S3 method for tol_summary unique_name(tax, ...)  # S3 method for tol_summary tax_name(tax, ...)  # S3 method for tol_summary ott_id(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/tol_about.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information about the Tree of Life — tol_about","text":"include_source_list Logical (default = FALSE). Return ordered list source trees. ... additional arguments customize API call (see rotl information). tax object created call tol_about.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_about.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information about the Tree of Life — tol_about","text":"invisible list synthetic tree summary statistics: date_created String. creation date tree. num_source_studies Integer. number studies     (publications)used sources. num_source_trees number trees used sources     (may >1 tree per study). taxonomy_version Open Tree Taxonomy version used     source. filtered_flags List. Taxa taxonomy flags     used construction tree. root List. Describes root node: node_id String. canonical identifier node. num_tips Numeric. number descendant tips. taxon list taxonomic properties: ott_id Numeric. OpenTree Taxonomy ID (ott_id). name String. taxonomic name queried node. unique_name String. string uniquely                 identifies taxon OTT. rank String. taxonomic rank taxon OTT. tax_sources List. list identifiers taxonomic                 sources, taxonomies, define taxa judged                 equivalent taxon. source_list List. Present     include_source_list TRUE. sourceid     ordering precedence order synthesis,     relationships earlier trees list priority     later trees list. See     source_id_map study details. source_id_map Named list lists. Present     include_source_list TRUE. Names correspond     ‘sourceids’ used source_list     . Source trees following properties:  git_sha String. git SHA identifying particular source             version. tree_id String. tree id associated study id used. study_id String. study identifier. typically include             prefix (\"pg_\" \"ot_\"). synth_id unique string version tree.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_about.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information about the Tree of Life — tol_about","text":"Summary information current draft tree life,     including information list trees taxonomy     used build . object returned tol_about can     passed taxonomy methods (tax_name(),     tax_rank(), tax_sources(), ott_id),     extract relevant taxonomic information root     synthetic tree.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rotl/reference/tol_about.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information about the Tree of Life — tol_about","text":"","code":"if (FALSE) { res <- tol_about() tax_sources(res) ott_id(res) studies <- source_list(tol_about(include_source_list=TRUE))}"},{"path":"https://docs.ropensci.org/rotl/reference/tol_induced_subtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtree from the Open Tree of Life — tol_induced_subtree","title":"Subtree from the Open Tree of Life — tol_induced_subtree","text":"Return induced subtree synthetic tree relates list nodes.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_induced_subtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtree from the Open Tree of Life — tol_induced_subtree","text":"","code":"tol_induced_subtree(   ott_ids = NULL,   node_ids = NULL,   label_format = NULL,   file,   ... )"},{"path":"https://docs.ropensci.org/rotl/reference/tol_induced_subtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtree from the Open Tree of Life — tol_induced_subtree","text":"ott_ids Numeric vector. OTT ids indicating nodes used tips induced tree. node_ids Character vector. Node ids indicating nodes used tips induced tree. label_format Character. Defines label type; one “name”, “id”, “name_and_id” (default). file specified, function write subtree file newick format. ... additional arguments customize API call (see rotl information).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_induced_subtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtree from the Open Tree of Life — tol_induced_subtree","text":"value specified file argument     (default), phylogenetic tree class phylo. Otherwise, function returns invisibly logical indicating     whether file successfully created. Note tree returned specifying file name  file argument “raw” Newick string returned Open     Tree Life. string contains singleton nodes, therefore     different tree returned phylo object     contain singleton nodes.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_induced_subtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subtree from the Open Tree of Life — tol_induced_subtree","text":"Return tree tips corresponding nodes identified input set consistent topology current synthetic tree. tree equivalent minimal subtree induced draft tree set identified nodes.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_induced_subtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subtree from the Open Tree of Life — tol_induced_subtree","text":"","code":"if (FALSE) { ## Result as a `phylo` object res <- tol_induced_subtree(ott_ids = c(292466, 267845, 316878, 102710))  ## Raw Newick string from Open Tree of Life tree_file <- tempfile(fileext = \".tre\") tol_induced_subtree(ott_ids = c(292466, 267845, 316878, 102710),                     file=tree_file)  }"},{"path":"https://docs.ropensci.org/rotl/reference/tol_mrca.html","id":null,"dir":"Reference","previous_headings":"","what":"MRCA of taxa from the synthetic tree — tol_mrca","title":"MRCA of taxa from the synthetic tree — tol_mrca","text":"Recent Common Ancestor set nodes","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_mrca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MRCA of taxa from the synthetic tree — tol_mrca","text":"","code":"tol_mrca(ott_ids = NULL, node_ids = NULL, ...)  # S3 method for tol_mrca tax_sources(tax, ...)  # S3 method for tol_mrca unique_name(tax, ...)  # S3 method for tol_mrca tax_name(tax, ...)  # S3 method for tol_mrca tax_rank(tax, ...)  # S3 method for tol_mrca ott_id(tax, ...)  # S3 method for tol_mrca source_list(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/tol_mrca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MRCA of taxa from the synthetic tree — tol_mrca","text":"ott_ids Numeric vector. ott ids MRCA desired. node_ids Character vector. node ids MRCA desired. ... additional arguments customize API call (see rotl information). tax object returned tol_mrca().","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_mrca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MRCA of taxa from the synthetic tree — tol_mrca","text":"invisible list MRCA node properties: mrca List node properties.  node_id String. canonical identifier node. num_tips Numeric. number descendant tips. taxon list taxonomic properties. returned         queried node taxon. (node taxon,         nearest_taxon list returned (see )).  ott_id Numeric. OpenTree Taxonomy ID (ottID). name String. taxonomic name queried node. unique_name String. string uniquely                 identifies taxon OTT. rank String. taxonomic rank taxon OTT. tax_sources List. list identifiers taxonomic                 sources, taxonomies, define taxa judged                 equivalent taxon. following properties list support/conflict node across         synthesis source trees. properties involve sourceid keys         nodeid values (see source_id_map ) properties         present every node. partial_path_of List. edge synthetic tree node         compatible edge input tree nodes (one         per tree). returned element reported sourceid:nodeid. supported_by List. Input tree nodes (one per tree) support         synthetic tree node. returned element reported         sourceid:nodeid. terminal List. Input tree nodes (one per tree) equivalent         synthetic tree node (via exact mapping, input tree         terminal may terminal descended synthetic tree node.         returned element reported sourceid:nodeid. conflicts_with Named list lists. Names correspond         sourceid keys. list contains input tree node ids (one per tree)         conflict synthetic node. nearest_taxon list taxonomic properties nearest rootward     taxon node MRCA node. returned MRCA node taxon     (otherwise taxon list returned).  ott_id Numeric. OpenTree Taxonomy ID (ottID). name String. taxonomic name queried node. unique_name String. string uniquely             identifies taxon OTT. rank String. taxonomic rank taxon OTT. tax_sources List. list identifiers taxonomic             sources, taxonomies, define taxa judged             equivalent taxon. source_id_map Named list lists. Names correspond     sourceid keys used support/conflict properties mrca     list . Source trees following properties:  git_sha git SHA identifying particular source             version. tree_id tree id associated study id used. study_id study identifier. typically include             prefix (\"pg_\" \"ot_\"). sourceid correspond source tree taxonomy,     name \"ott\"+`taxonomy_version`, value     ott_id taxon taxonomy version. \"Taxonomy\" ever     appear supported_by.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_mrca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MRCA of taxa from the synthetic tree — tol_mrca","text":"Get MRCA set nodes current synthetic     tree. Accepts combination node ids ott ids     input. Returns information recent common     ancestor (MRCA) node well recent taxonomic     ancestor (MRTA) node (closest taxonomic node MRCA     node synthetic tree; MRCA MRTA may     node). , taxonomic information     mrca slot, otherwise     nearest_taxon slot list. specified     nodes synthetic tree error returned. Taxonomic methods (tax_sources(), ott_id(),     unique_name(), ...) available objects     returned tol_mrca(). MRCA node MRTA,     name object returned methods start     ‘ott’, otherwise start ‘mrca’.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_mrca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MRCA of taxa from the synthetic tree — tol_mrca","text":"","code":"if (FALSE) { birds_mrca <- tol_mrca(ott_ids=c(412129, 119214)) ott_id(birds_mrca) tax_sources(birds_mrca) }"},{"path":"https://docs.ropensci.org/rotl/reference/tol_node_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Node info — tol_lineage","title":"Node info — tol_lineage","text":"Get summary information node synthetic tree","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_node_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Node info — tol_lineage","text":"","code":"tol_lineage(tax, ...)  tol_node_info(ott_id = NULL, node_id = NULL, include_lineage = FALSE, ...)  # S3 method for tol_node tax_rank(tax, ...)  # S3 method for tol_node tax_sources(tax, ...)  # S3 method for tol_node unique_name(tax, ...)  # S3 method for tol_node tax_name(tax, ...)  # S3 method for tol_node ott_id(tax, ...)  # S3 method for tol_node source_list(tax, ...)  # S3 method for tol_node tax_lineage(tax, ...)  # S3 method for tol_node tol_lineage(tax, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/tol_node_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Node info — tol_lineage","text":"tax object returned tol_node_info. ... additional arguments customize API call (see ?rotl information) ott_id Numeric. OpenTree taxonomic identifier. node_id Character. OpenTree node identifier. include_lineage Logical (default = FALSE). Whether return lineage node synthetic tree.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_node_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Node info — tol_lineage","text":"tol_node_info returns invisible list summary     information queried node: node_id String. canonical identifier node. num_tips Numeric. number descendant tips. partial_path_of List. edge synthetic tree node     compatible edge input tree nodes (one     per tree). returned element reported sourceid:nodeid. query  node id resolved node. can differ    node_id field query id canonical. taxon list taxonomic properties. returned     queried node taxon. source :  ott_id Numeric. OpenTree Taxonomy ID (ottID). name String. taxonomic name queried node. unique_name String. string uniquely             identifies taxon OTT. rank String. taxonomic rank taxon OTT. tax_sources List. list identifiers taxonomic             sources, taxonomies, define taxa judged             equivalent taxon. following properties list support/conflict node across     synthesis source trees. properties involve sourceid keys     nodeid values (see source_id_map ). supported_by List. Input tree nodes (one per tree) support     synthetic tree node. returned element reported     sourceid:nodeid. terminal List. Input tree nodes (one per tree)     equivalent synthetic tree node (via exact mapping,     input tree terminal may terminal descended     synthetic tree node. returned element reported     sourceid:nodeid. conflicts_with Named list lists. Names correspond     sourceid keys. list contains input tree node ids (one per     tree) conflict synthetic node.  tol_lineage tax_lineage return data         frames. tol_lineage indicate ancestor         node identifier, number tips descending         node, whether corresponds taxonomic level.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_node_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Node info — tol_lineage","text":"Returns summary information node graph.     node interest may specified using either node id     taxon id, . specified node OTT id     graph, error returned. argument include_lineage=TRUE used, can     use tax_lineage() tol_lineage return     taxonomic information node information     ancestors node, root tree.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_node_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Node info — tol_lineage","text":"","code":"if (FALSE) { birds <- tol_node_info(ott_id=81461, include_lineage=TRUE) source_list(birds) tax_rank(birds) ott_id(birds) tax_lineage(birds) tol_lineage(birds)}"},{"path":"https://docs.ropensci.org/rotl/reference/tol_subtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a subtree from the synthetic tree — tol_subtree","title":"Extract a subtree from the synthetic tree — tol_subtree","text":"Extract subtree synthetic tree Open Tree node id.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_subtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a subtree from the synthetic tree — tol_subtree","text":"","code":"tol_subtree(ott_id = NULL, node_id = NULL, label_format = NULL, file, ...)"},{"path":"https://docs.ropensci.org/rotl/reference/tol_subtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a subtree from the synthetic tree — tol_subtree","text":"ott_id Numeric. ott id node tree serve root tree returned. node_id Character. node id node tree serve root tree returned. label_format Character. Defines label type; one “name”, “id”,  “name_and_id” (default). file specified, function write subtree file newick format. ... additional arguments customize API call (see rotl information).","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_subtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a subtree from the synthetic tree — tol_subtree","text":"value specified file argument     (default), phylogenetic tree class phylo.     Otherwise, function returns invisibly logical indicating     whether file successfully created.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_subtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a subtree from the synthetic tree — tol_subtree","text":"Given node, return subtree synthetic tree descended     node. start node may specified using either node id     ott id, . specified node     synthetic tree error returned. size limit     25000 tips method.","code":""},{"path":"https://docs.ropensci.org/rotl/reference/tol_subtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a subtree from the synthetic tree — tol_subtree","text":"","code":"if (FALSE) { res <- tol_subtree(ott_id=241841)}"},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-310","dir":"Changelog","previous_headings":"","what":"rotl 3.1.0","title":"rotl 3.1.0","text":"CRAN release: 2023-06-15","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"breaking-change-3-1-0","dir":"Changelog","previous_headings":"","what":"Breaking change","title":"rotl 3.1.0","text":"tnrs_match_names now returns taxon highest matching score instead one lowest OTT id (issues #127 #143 reported @ajrominger).","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-3014","dir":"Changelog","previous_headings":"","what":"rotl 3.0.14","title":"rotl 3.0.14","text":"CRAN release: 2022-10-06 Make sure package fails gracefully internet connection. vignettes now pre-computed.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-3012","dir":"Changelog","previous_headings":"","what":"rotl 3.0.12","title":"rotl 3.0.12","text":"CRAN release: 2021-12-08 default argument context_name function tnrs_match_names changed NULL life. changes made address lead unexpected results. Previously, context inferred based first match several names provided (see #134 reported @LunaSare, https://github.com/OpenTreeOfLife/feedback/issues/528)/ “Suggest” dependency fulltext removed following archival CRAN.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-3011","dir":"Changelog","previous_headings":"","what":"rotl 3.0.11","title":"rotl 3.0.11","text":"CRAN release: 2020-10-22","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"other-changes-3-0-11","dir":"Changelog","previous_headings":"","what":"Other changes","title":"rotl 3.0.11","text":"none names provided tnrs_match_names match Open Tree Life, error thrown nothing returned. make behavior function consistent situations, none names provided match, tibble returned warning issued.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"bug-fix-3-0-11","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"rotl 3.0.11","text":"attempting match name exist tree, error thrown (bug #128, PR #129, @daijiang)","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-3010","dir":"Changelog","previous_headings":"","what":"rotl 3.0.10","title":"rotl 3.0.10","text":"CRAN release: 2019-09-28 Small fixes following updates Open Tree Life API (visible change users). Updated documentation reflect new value output tol_node_info().","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-309","dir":"Changelog","previous_headings":"","what":"rotl 3.0.9","title":"rotl 3.0.9","text":"CRAN release: 2019-06-14 Small fixes following updates Open Tree Life API.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-307","dir":"Changelog","previous_headings":"","what":"rotl 3.0.7","title":"rotl 3.0.7","text":"CRAN release: 2019-02-15 Minor update vignette address change TNRS endpoint (underscores can’t included taxon names anymore).","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-306","dir":"Changelog","previous_headings":"","what":"rotl 3.0.6","title":"rotl 3.0.6","text":"CRAN release: 2019-01-20 Minor update address warnings seen CRAN.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-305","dir":"Changelog","previous_headings":"","what":"rotl 3.0.5","title":"rotl 3.0.5","text":"CRAN release: 2018-09-29","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"new-features-3-0-5","dir":"Changelog","previous_headings":"","what":"New features","title":"rotl 3.0.5","text":"data types data frame returned tnrs_match_names consistent, remain even using update().","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"other-changes-3-0-5","dir":"Changelog","previous_headings":"","what":"Other changes","title":"rotl 3.0.5","text":"Small internal changes reflect changes data structures returned API.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-304","dir":"Changelog","previous_headings":"","what":"rotl 3.0.4","title":"rotl 3.0.4","text":"CRAN release: 2018-04-03","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"new-features-3-0-4","dir":"Changelog","previous_headings":"","what":"New features","title":"rotl 3.0.4","text":"improve stability results across releases Open Tree Taxonomy, TNRS match lowest OTT id returned instead first one case name shared across multiple domains (related #88) warning issued users attempt use TNRS duplicated names.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"other-changes-3-0-4","dir":"Changelog","previous_headings":"","what":"Other changes","title":"rotl 3.0.4","text":"Fix typos workaround broken API retrieve supplementary materials vignette.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-303","dir":"Changelog","previous_headings":"","what":"rotl 3.0.3","title":"rotl 3.0.3","text":"CRAN release: 2017-03-04","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"new-features-3-0-3","dir":"Changelog","previous_headings":"","what":"New features","title":"rotl 3.0.3","text":"function get_study_subtree gains argument tip_label control formatting tip labels, #90, reported @bomeara new function is_in_tree takes list OTT ids (.e., output ott_id()), returns vector logical indicating whether included synthetic tree (workaround #31).","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"bug-fixes-3-0-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"rotl 3.0.3","text":"function get_study_subtree ignored argument subtree_id, #89 reported @bomeara","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"other-chaanges-3-0-3","dir":"Changelog","previous_headings":"","what":"Other chaanges","title":"rotl 3.0.3","text":"citation(\"rotl\") now includes reference Open Tree Life publication. “use rotl?” vignette updated document behavior v3 OTL API returns HTTP error code 400 request induced subtree includes taxa synthetic tree (fix #84)","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-301","dir":"Changelog","previous_headings":"","what":"rotl 3.0.1","title":"rotl 3.0.1","text":"CRAN release: 2016-09-20 Fix tests vignette reflect changes accompanying release 6.1 synthetic tree Add section vignette “use rotl?” get higher taxonomy given taxon. Add CITATION file MEE manuscript information (#82)","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-300","dir":"Changelog","previous_headings":"","what":"rotl 3.0.0","title":"rotl 3.0.0","text":"CRAN release: 2016-04-26 rotl now interacts v3.0 Open Tree Life APIs. documentation updated reflect associated changes. information v3.0 Open Tree Life APIs can found wiki.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"new-features-3-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"rotl 3.0.0","text":"New methods: tax_sources, is_suppressed, tax_rank, unique_name, name, ott_id, objects returned tnrs_match_names(), taxonomy_taxon_info(), taxonomy_taxon_mrca(), tol_node_info(), tol_about(), tol_mrca(). methods class. New method tax_lineage() extract higher taxonomy object returned taxonomy_taxon_info() (initially suggested Matt Pennell, #57). New method tol_lineage() extract nodes towards root tree. New print methods tol_node_info() tol_mrca(). New functions study_external_IDs() taxon_external_IDs() return external identifiers study associated trees (e.g., DOI, TreeBase ID); identifiers taxon names taxonomic databases. vignette “Data mashup” includes example use . function strip_ott_id() gains argument remove_underscores remove underscores tips trees returned OTL.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"changes-3-0-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"rotl 3.0.0","text":"Rename method ott_taxon_name() tax_name() consistency. Rename method synth_sources() study_list() source_list(). Refactor result query checked parsed (invisible user).","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"bug-fixes-3-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"rotl 3.0.0","text":"Fix bug studies_find_studies(), arguments verbose exact ignored. argument only_current dropped methods associated objects returned tnrs_match_names() print method tnrs_context() duplicated names. inspect(), update() synonyms() methods tnrs_match_names() work query included unmatched taxa.","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-050","dir":"Changelog","previous_headings":"","what":"rotl 0.5.0","title":"rotl 0.5.0","text":"CRAN release: 2016-02-03 New vignette: meta-analysis Added arguments include_lineage list_terminal_descendants taxonomy_taxon() Improve warning format result one taxa requested doesn’t match anything tnrs_match_names. data frame returned tnrs_match_names, columns approximate_match, is_synonym is_deprecated now logical (instead character) [issue #54] New utility function strip_ott_ids removes OTT id information character vector, making easier match tip labels trees returned tol_induced_subtree taxonomic names data sources. function can also remove underscores taxon names. New method list_trees returns list tree ids associated studies. function takes output studies_find_studies studies_find_trees. studies_find_studies studies_find_trees gain argument detailed (default set TRUE), produces data frame summarizing information (title study, year publication, DOI, ids associated trees, …) studies matching search criteria. get_study_tree gains argument deduplicate. TRUE, tree returned given study contains duplicated tip labels, made unique parsed NCL appending suffix (_1, _2, _3, etc.). (#46, reported @bomeara) New method get_study_year objects class study_meta returns year publication study. robust approach used get_tree_ids identify tree ids metadata returned API","code":""},{"path":"https://docs.ropensci.org/rotl/news/index.html","id":"rotl-041","dir":"Changelog","previous_headings":"","what":"rotl 0.4.1","title":"rotl 0.4.1","text":"CRAN release: 2015-07-24 Initial CRAN release July, 24th 2015","code":""}]
